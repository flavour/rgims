(dp1
S'output'
p2
S'<class \'_mysql_exceptions.OperationalError\'> (1050, "Table \'s3_audit\' already exists")'
p3
sS'layer'
p4
S'C:\\Eden\\web2py\\applications\\eden\\models\\00_db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n"""\n    Import Modules\n    Configure the Database\n    Instantiate Classes\n"""\n\n# Are we running in debug mode?\ns3.debug = request.vars.get("debug", None) or \\\n                    settings.get_base_debug()\n\nif s3.debug:\n    # Reload all modules every request\n    # Doesn\'t catch s3cfg or s3/*\n    from gluon.custom_import import track_changes\n    track_changes(True)\n\nimport datetime\n\ntry:\n    import json # try stdlib (Python 2.6)\nexcept ImportError:\n    try:\n        import simplejson as json # try external module\n    except:\n        import gluon.contrib.simplejson as json # fallback to pure-Python module\n\n########################\n# Database Configuration\n########################\n\nmigrate = settings.get_base_migrate()\nfake_migrate = settings.get_base_fake_migrate()\n\nif migrate:\n    check_reserved = ["mysql", "postgres"]\nelse:\n    check_reserved = None\n\n(db_string, pool_size) = settings.get_database_string()\nif db_string.find("sqlite") != -1:\n    db = DAL(db_string,\n             check_reserved=check_reserved,\n             migrate_enabled = migrate,\n             fake_migrate_all = fake_migrate)\n    # on SQLite 3.6.19+ this enables foreign key support (included in Python 2.7+)\n    # db.executesql("PRAGMA foreign_keys=ON")\nelse:\n    try:\n        if db_string.find("mysql") != -1:\n            # Use MySQLdb where available (pymysql has given broken pipes)\n            try:\n                import MySQLdb\n                from gluon.dal import MySQLAdapter\n                MySQLAdapter.driver = MySQLdb\n            except ImportError:\n                # Fallback to pymysql\n                pass\n            if check_reserved:\n                check_reserved = ["postgres"]\n            db = DAL(db_string, check_reserved=check_reserved,\n                     pool_size=pool_size, migrate_enabled = migrate)\n        else:\n            # PostgreSQL\n            if check_reserved:\n                check_reserved = ["mysql"]\n            db = DAL(db_string, check_reserved=check_reserved,\n                     pool_size=pool_size, migrate_enabled = migrate)\n    except:\n        db_type = db_string.split(":", 1)[0]\n        db_location = db_string.split("@", 1)[1]\n        raise(HTTP(503, "Cannot connect to %s Database: %s" % (db_type, db_location)))\n\ncurrent.db = db\ndb.set_folder("upload")\n\n# Sessions Storage\nif settings.get_base_session_memcache():\n    # Store sessions in Memcache\n    from gluon.contrib.memcache import MemcacheClient\n    cache.memcache = MemcacheClient(request,\n                                    [settings.get_base_session_memcache()])\n    from gluon.contrib.memdb import MEMDB\n    session.connect(request, response, db=MEMDB(cache.memcache))\n\n####################################################################\n# Instantiate Classes from Modules                                 #\n# - store instances in current to be accessible from other modules #\n####################################################################\n\nfrom gluon.tools import Mail\nmail = Mail()\ncurrent.mail = mail\n\nfrom gluon.storage import Messages\nmessages = Messages(T)\ncurrent.messages = messages\n\n# Import the S3 Framework\nif update_check_needed:\n    # Reload the Field definitions\n    reload(s3base.s3fields)\nelse:\n    import s3 as s3base\n\n# Use session for persistent per-user variables\n# - beware of a user having multiple tabs open!\n# - don\'t save callables or class instances as these can\'t be pickled\nif not session.s3:\n    session.s3 = Storage()\n\n# AAA\nauth = s3base.AuthS3()\ncurrent.auth = auth\n\ns3_audit = s3base.S3Audit(migrate=migrate, fake_migrate=fake_migrate)\ncurrent.s3_audit = s3_audit\n\n# Use username instead of email address for logins\n# - would probably require further customisation\n#   to get this working within Eden\n#auth.settings.username_field = True\n\nauth.settings.hmac_key = settings.get_auth_hmac_key()\nauth.define_tables(migrate=migrate, fake_migrate=fake_migrate)\n\n# Shortcuts for models/controllers/views\ns3_has_role = auth.s3_has_role\ns3_has_permission = auth.s3_has_permission\ns3_logged_in_person = auth.s3_logged_in_person\n\n# CRUD\ncrud = s3base.CrudS3()\ncurrent.crud = crud\ns3.crud = Storage()\n\n# S3 Custom Validators and Widgets, imported here into the global\n# namespace in order to access them without the s3base namespace prefix\ns3_action_buttons = s3base.S3CRUD.action_buttons\ns3_fullname = s3base.s3_fullname\nS3ResourceHeader = s3base.S3ResourceHeader\nfrom s3.s3navigation import s3_rheader_tabs\nfrom s3.s3validators import *\nfrom s3.s3widgets import *\n\n# GIS Module\ngis = s3base.GIS()\ncurrent.gis = gis\n\n# S3RequestManager\ns3mgr = s3base.S3RequestManager()\ncurrent.manager = s3mgr\ns3_request = s3base.s3_request\n\n# S3XML\ns3xml = s3base.S3XML()\ncurrent.xml = s3xml\n\n# Messaging\nmsg = s3base.S3Msg()\ncurrent.msg = msg\n\n# Sync\nsync = s3base.S3Sync()\ncurrent.sync = sync\n\n# -----------------------------------------------------------------------------\ndef s3_clear_session():\n\n    # S3ResourceManager last seen records (rcvars)\n    s3mgr.clear_session()\n\n    # Session-owned records\n    if "owned_records" in session:\n        del session["owned_records"]\n\n    if "s3" in session:\n        s3 = session.s3\n        opts = ["hrm", "report_options", "utc_offset"]\n        for o in opts:\n            if o in s3:\n                del s3[o]\n\n# -----------------------------------------------------------------------------\ndef s3_auth_on_login(form):\n    """\n        Actions to be performed upon successful login\n            Do not redirect from here!\n    """\n    s3_clear_session()\n\n# -----------------------------------------------------------------------------\ndef s3_auth_on_logout(user):\n    """\n        Actions to be performed after logout\n            Do not redirect from here!\n    """\n    s3_clear_session()\n\n# END =========================================================================\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Eden\\web2py\\gluon\\restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "C:\\Eden\\web2py\\applications\\eden\\models\\00_db.py", line 117, in <module>\n    s3_audit = s3base.S3Audit(migrate=migrate, fake_migrate=fake_migrate)\n  File "applications\\eden\\modules\\s3\\s3aaa.py", line 5536, in __init__\n    fake_migrate=fake_migrate)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 7123, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 7154, in lazy_define_table\n    polymodel=polymodel)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 905, in create_table\n    self.create_sequence_and_triggers(query,table)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1662, in create_sequence_and_triggers\n    self.execute(query)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1676, in execute\n    return self.log_execute(*a, **b)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1670, in log_execute\n    ret = self.cursor.execute(*a, **b)\n  File "C:\\Python27\\lib\\site-packages\\MySQLdb\\cursors.py", line 174, in execute\n    self.errorhandler(self, exc, value)\n  File "C:\\Python27\\lib\\site-packages\\MySQLdb\\connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nOperationalError: (1050, "Table \'s3_audit\' already exists")\n'
p11
s.