(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> month must be in 1..12"
p3
sS'layer'
p4
S'/home/web2py/applications/eden/controllers/req.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n"""\n    Request Management\n"""\n\nmodule = request.controller\nresourcename = request.function\n\nif not settings.has_module(module):\n    raise HTTP(404, body="Module disabled: %s" % module)\n\n# -----------------------------------------------------------------------------\ndef index():\n    """\n        Application Home page\n        - custom View\n    """\n\n    module_name = settings.modules[module].name_nice\n    response.title = module_name\n    return dict(module_name=module_name)\n\n# -----------------------------------------------------------------------------\ndef is_affiliated():\n    """\n        Check if User is affiliated to an Organisation\n        @ToDo: Move this elsewhere\n    """\n\n    if not auth.is_logged_in():\n        return False\n    elif s3_has_role(ADMIN):\n        return True\n    else:\n        table = auth.settings.table_user\n        query = (table.id == auth.user.id)\n        auth_user = db(query).select(table.organisation_id,\n                                     limitby=(0, 1)).first()\n        if auth_user and auth_user.organisation_id:\n            return True\n        else:\n            return False\n\n# =============================================================================\ndef create():\n    """ Redirect to req/create """\n\n    redirect(URL(f="req", args="create"))\n\n# -----------------------------------------------------------------------------\ndef req():\n    """ REST Controller """\n\n    req_table = s3db.req_req\n\n    # Set the req_item site_id (Requested From), called from action buttons on req/req_item_inv_item/x page\n    if "req_item_id" in request.vars and "inv_item_id" in request.vars:\n        inv_item = s3db.inv_inv_item[request.vars.inv_item_id]\n        site_id = inv_item.site_id\n        item_id = inv_item.item_id\n        s3db.req_req_item[request.vars.req_item_id] = dict(site_id = site_id)\n        response.confirmation = T("%(item)s requested from %(site)s" % {"item":s3db.supply_item_represent(item_id, show_link = False),\n                                                                        "site":s3db.org_site_represent(site_id, show_link=False)\n                                                                        })\n\n    def prep(r):\n\n        s3db.req_prep(r)\n\n        # Remove type from list_fields\n        list_fields = s3db.get_config("req_req", "list_fields")\n        try:\n            list_fields.remove("type")\n        except:\n             # It has already been removed.\n             # This can happen if the req controller is called\n             # for a second time, such as when printing reports\n            pass\n        s3db.configure("req_req", list_fields=list_fields)\n\n        if r.interactive:\n            # Set Fields and Labels depending on type\n            type = ( r.record and r.record.type ) or \\\n                   ( request.vars and request.vars.type )\n            if type:\n                type = int(type)\n                req_table.type.default = int(type)\n\n                # This prevents the type from being edited AFTER it is set\n                req_table.type.readable = False\n                req_table.type.writable = False\n\n                crud_strings = settings.get_req_req_crud_strings(type)\n                if crud_strings:\n                    s3.crud_strings["req_req"] = crud_strings\n\n                # Filter the query based on type\n                if s3.filter:\n                    s3.filter = s3.filter & \\\n                                         (s3db.req_req.type == type)\n                else:\n                    s3.filter = (s3db.req_req.type == type)\n\n            # @ToDo: apply these changes via JS for the create form where type is edittable\n            if type == 1: # Item\n                req_table.date_recv.readable = True\n                req_table.date_recv.writable = True\n                req_table.date_recv.readable = True\n                req_table.date_recv.writable = True\n\n                req_table.purpose.label = T("What the Items will be used for")\n                req_table.site_id.label =T("Deliver To")\n                req_table.request_for_id.label = T("Deliver To")\n                req_table.recv_by_id.label = T("Delivered To")\n\n            if type == 3: # Person\n                req_table.date_required_until.readable = True\n                req_table.date_required_until.writable = True\n\n                req_table.purpose.label = T("Task Details")\n                req_table.site_id.label =  T("Report To")\n                req_table.request_for_id.label = T("Report To")\n                req_table.recv_by_id.label = T("Reported To")\n\n            if r.method != "update" and r.method != "read":\n                if not r.component:\n                    # Hide fields which don\'t make sense in a Create form\n                    # - includes one embedded in list_create\n                    # - list_fields over-rides, so still visible within list itself\n                    s3db.req_create_form_mods()\n                    s3db.configure(s3db.req_req,\n                                   create_next = URL(c="req", f="req",\n                                                     args=["[id]", "req_item"])\n                                   )\n                    # Get the default Facility for this user\n                    # @ToDo: Use site_id in User Profile (like current organisation_id)\n                    if deployment_settings.has_module("hrm"):\n                        hrtable = s3db.hrm_human_resource\n                        query = (hrtable.person_id == s3_logged_in_person())\n                        site = db(query).select(hrtable.site_id,\n                                                limitby=(0, 1)).first()\n                        if site:\n                            r.table.site_id.default = site.site_id\n\n                elif r.component.name == "document":\n                    s3.crud.submit_button = T("Add")\n                    table = r.component.table\n                    # @ToDo: Fix for Link Table\n                    #table.date.default = r.record.date\n                    #if r.record.site_id:\n                    #    stable = db.org_site\n                    #    query = (stable.id == r.record.site_id)\n                    #    site = db(query).select(stable.location_id,\n                    #                            stable.organisation_id,\n                    #                            limitby=(0, 1)).first()\n                    #    if site:\n                    #        table.location_id.default = site.location_id\n                    #        table.organisation_id.default = site.organisation_id\n\n                elif r.component.name == "req_item":\n                    table = r.component.table\n                    table.site_id.writable = table.site_id.readable = False\n                    s3db.req_hide_quantities(table)\n\n                elif r.component.name == "req_skill":\n                    s3db.req_hide_quantities(r.component.table)\n\n        if r.component and r.component.name == "commit":\n            table = r.component.table\n            # Allow commitments to be added when doing so as a component\n            s3db.configure(table,\n                            listadd = True)\n\n            type = r.record.type\n            if type == 1: # Items\n                # Limit site_id to facilities the user has permissions for\n                auth.permitted_facilities(table=r.table,\n                                          error_msg=T("You do not have permission for any facility to make a commitment."))\n                if r.interactive:\n                    # Redirect to the Items tab after creation\n                    s3db.configure(table,\n                                   create_next = URL(c="req", f="commit",\n                                                     args=["[id]", "commit_item"]),\n                                   update_next = URL(c="req", f="commit",\n                                                     args=["[id]", "commit_item"]))\n            else:\n                # Non-Item commits can have an Organisation\n                # Check if user is affiliated to an Organisation\n                if is_affiliated():\n                    # Limit organisation_id to organisations the user has permissions for\n                    auth.permitted_organisations(table=r.table,\n                                                 redirect_on_error=False)\n                    table.organisation_id.readable = True\n                    table.organisation_id.writable = True\n                else:\n                    # Unaffiliated people can\'t commit on behalf of others\n                    r.component.table.committer_id.writable = False\n                    r.component.table.committer_id.comment = None\n\n                # Non-Item commits shouldn\'t have a From Inventory\n                # @ToDo: Assets do?\n                table.site_id.readable = False\n                table.site_id.writable = False\n                if r.interactive and r.record.type == 3: # People\n                    # Redirect to the Persons tab after creation\n                    s3db.configure(table,\n                                   create_next = URL(c="req", f="commit",\n                                                     args=["[id]", "commit_person"]),\n                                   update_next = URL(c="req", f="commit",\n                                                     args=["[id]", "commit_person"])\n                                   )\n        else:\n            # Limit site_id to facilities the user has permissions for\n            # @ToDo: Non-Item requests shouldn\'t be bound to a Facility?\n            auth.permitted_facilities(table=r.table,\n                                      error_msg=T("You do not have permission for any facility to make a request."))\n\n        return True\n    s3.prep = prep\n\n    # Post-process\n    def postp(r, output):\n\n        if r.interactive:\n            s3_action_buttons(r)\n            if not r.component:\n                if deployment_settings.get_req_use_commit():\n                    # This is appropriate to all\n                    s3.actions.append(\n                        dict(url = URL(c="req", f="req",\n                                       args=["[id]", "commit", "create"]),\n                             _class = "action-btn",\n                             label = str(T("Commit"))\n                            )\n                        )\n                # This is only appropriate for item requests\n                query = (r.table.type == 1)\n                rows = db(query).select(r.table.id)\n                restrict = [str(row.id) for row in rows]\n                s3.actions.append(\n                    dict(url = URL(c="req", f="req",\n                                   args=["[id]", "req_item"]),\n                         _class = "action-btn",\n                         label = str(T("View Items")),\n                         restrict = restrict\n                        )\n                    )\n            elif r.component.name == "req_item":\n                req_item_inv_item_btn = dict(url = URL(c = "req",\n                                                       f = "req_item_inv_item",\n                                                       args = ["[id]"]\n                                                      ),\n                                             _class = "action-btn",\n                                             label = str(T("Request from Facility")),\n                                             )\n                s3.actions.append(req_item_inv_item_btn)\n            elif r.component.name == "req_skill":\n                pass\n            else:\n                # We don\'t yet have other components\n                pass\n\n        return output\n    s3.postp = postp\n\n    output = s3_rest_controller("req", "req",\n                                rheader=eden.req.req_rheader)\n\n    return output\n\n# =============================================================================\ndef req_item():\n    """ REST Controller """\n\n    s3db.configure("req_req_item",\n                   insertable=False)\n\n    def prep(r):\n        if r.interactive:\n            if r.method != None and r.method != "update" and r.method != "read":\n                # Hide fields which don\'t make sense in a Create form\n                # - includes one embedded in list_create\n                # - list_fields over-rides, so still visible within list itself\n                s3db.req_hide_quantities(r.table)\n\n        return True\n    s3.prep = prep\n\n    output = s3_rest_controller()\n\n    req_item_inv_item_btn = dict(url = URL(c="req", f="req_item_inv_item",\n                                           args=["[id]"]),\n                                _class = "action-btn",\n                                label = str(T("Request from Facility")),\n                               )\n    if s3.actions:\n        s3.actions += [req_item_inv_item_btn]\n    else:\n        s3.actions = [req_item_inv_item_btn]\n\n    return output\n\n# -----------------------------------------------------------------------------\ndef req_item_packs():\n    """\n        Called by S3FilterFieldChange to provide the pack options for a\n            particular Item\n    """\n\n    table = s3db.supply_item_pack\n    ritable = s3db.req_req_item\n    query = (ritable.id == request.args[0]) & \\\n            (ritable.item_id == table.item_id)\n\n    response.headers["Content-Type"] = "application/json"\n    return db(query).select(table.id,\n                            table.name,\n                            table.quantity).json()\n\n# -----------------------------------------------------------------------------\ndef req_item_inv_item():\n    """\n        Shows the inventory items which match a requested item\n        @ToDo: Make this page a component of req_item\n    """\n\n    req_item_id  = request.args[0]\n    request.args = [] #\n    ritable = s3db.req_req_item\n    req_item = ritable[req_item_id]\n    rtable = s3db.req_req\n    req = rtable[req_item.req_id]\n\n    output = {}\n\n    output["title"] = T("Request Stock from Available Warehouse")\n    output["req_btn"] = A(T("Return to Request"),\n                          _href = URL(c="req", f="req",\n                                      args=[req_item.req_id, "req_item"]),\n                          _class = "action-btn"\n                          )\n\n    output["req_item"] = TABLE( TR(\n                                    TH( "%s: " % T("Requested By") ),\n                                    rtable.site_id.represent(req.site_id),\n                                    TH( "%s: " % T("Item")),\n                                    ritable.item_id.represent(req_item.item_id),\n                                   ),\n                                TR(\n                                    TH( "%s: " % T("Requester") ),\n                                    rtable.requester_id.represent(req.requester_id),\n                                    TH( "%s: " % T("Quantity")),\n                                    req_item.quantity,\n                                   ),\n                                TR(\n                                    TH( "%s: " % T("Date Requested") ),\n                                    rtable.date.represent(req.date),\n                                    TH( T("Quantity Committed")),\n                                    req_item.quantity_commit,\n                                   ),\n                                TR(\n                                    TH( "%s: " % T("Date Required") ),\n                                    rtable.date_required.represent(req.date_required),\n                                    TH( "%s: " % T("Quantity in Transit")),\n                                    req_item.quantity_transit,\n                                   ),\n                                TR(\n                                    TH( "%s: " % T("Priority") ),\n                                    rtable.priority.represent(req.priority),\n                                    TH( "%s: " % T("Quantity Fulfilled")),\n                                    req_item.quantity_fulfil,\n                                   )\n                               )\n\n    s3.no_sspag = True # pagination won\'t work with 2 datatables on one page @todo: test\n\n    itable = s3db.inv_inv_item\n    # Get list of matching inventory items\n    s3.filter = (itable.item_id == req_item.item_id)\n    # Tweak CRUD String for this context\n    s3.crud_strings["inv_inv_item"].msg_list_empty = T("No Inventories currently have this item in stock")\n\n    inv_items = s3_rest_controller("inv", "inv_item")\n    output["items"] = inv_items["items"]\n\n    if current.deployment_settings.get_supply_use_alt_name():\n        # Get list of alternative inventory items\n        atable = s3db.supply_item_alt\n        query = (atable.item_id == req_item.item_id ) & \\\n                (atable.deleted == False )\n        alt_item_rows = db(query).select(atable.alt_item_id)\n        alt_item_ids = [alt_item_row.alt_item_id for alt_item_row in alt_item_rows]\n\n        if alt_item_ids:\n            s3.filter = (itable.item_id.belongs(alt_item_ids))\n            inv_items_alt = s3_rest_controller("inv", "inv_item")\n            output["items_alt"] = inv_items_alt["items"]\n        else:\n            output["items_alt"] = T("No Inventories currently have suitable alternative items in stock")\n\n    response.view = "req/req_item_inv_item.html"\n    s3.actions = [dict(url = URL(c = request.controller,\n                                          f = "req",\n                                          args = [req_item.req_id, "req_item"],\n                                          vars = dict(req_item_id = req_item_id,\n                                                      inv_item_id = "[id]")\n                                         ),\n                                _class = "action-btn",\n                                label = str(T("Request From")),\n                                )]\n\n    return output\n\n# =============================================================================\ndef req_skill():\n    """ REST Controller """\n\n    tablename = "req_req_skill"\n    table = s3db[tablename]\n\n    s3db.configure(tablename,\n                   insertable=False)\n\n    def prep(r):\n        if r.interactive:\n            if r.method != "update" and r.method != "read":\n                # Hide fields which don\'t make sense in a Create form\n                # - includes one embedded in list_create\n                # - list_fields over-rides, so still visible within list itself\n                s3db.req_hide_quantities(r.table)\n\n        return True\n    s3.prep = prep\n\n    # Post-process\n    def postp(r, output):\n        if r.interactive:\n            response.s3.actions = [\n                dict(url = URL(c="req", f="req",\n                               args=["req_skill", "[id]"]),\n                     _class = "action-btn",\n                     label = str(READ)\n                    )\n                ]\n        return output\n    s3.postp = postp\n\n    output = s3_rest_controller("req", "req_skill")\n\n    return output\n\n# =============================================================================\ndef commit():\n    """ REST Controller """\n\n    # Check if user is affiliated to an Organisation\n    if not is_affiliated():\n        tablename = "req_commit_person"\n        table = s3db[tablename]\n        # Unaffiliated people can\'t commit on behalf of others\n        table.person_id.writable = False\n        # & can only make single-person commitments\n        # (This should have happened in the main commitment)\n        s3db.configure(tablename,\n                       insertable=False)\n\n    def prep(r):\n\n        if r.interactive:\n            # Commitments created through UI should be done via components\n            # @ToDo: Block Direct Create attempts\n            table = r.table\n            #table.req_id.default = request.vars["req_id"]\n            #table.req_id.writable = False\n\n            if r.record:\n                if r.record.type == 1: # Items\n                    # Limit site_id to facilities the user has permissions for\n                    auth.permitted_facilities(table=table,\n                                              error_msg=T("You do not have permission for any facility to make a commitment.") )\n\n                else:\n                    # Non-Item commits can have an Organisation\n                    # Limit organisation_id to organisations the user has permissions for\n                    auth.permitted_organisations(table=r.table, redirect_on_error=False)\n                    table.organisation_id.readable = True\n                    table.organisation_id.writable = True\n                    # Non-Item commits shouldn\'t have a From Inventory\n                    # @ToDo: Assets do?\n                    table.site_id.readable = False\n                    table.site_id.writable = False\n\n        if r.component:\n            req_id = r.record.req_id\n            if r.component.name == "commit_item":\n                # Limit commit items to items from the request\n                s3db.req_commit_item.req_item_id.requires = \\\n                    IS_ONE_OF(db,\n                              "req_req_item.id",\n                              s3db.req_item_represent,\n                              orderby = "req_req_item.id",\n                              filterby = "req_id",\n                              filter_opts = [req_id],\n                              sort=True\n                              )\n            elif r.component.name == "person":\n                pass\n                # Limit commit skills to skills from the request\n                #db.req_commit_skill.req_skill_id.requires = \\\n                #    IS_ONE_OF(db,\n                #              "req_req_skill.id",\n                #              s3db.req_skill_represent,\n                #              orderby = "req_req_skill.id",\n                #              filterby = "req_id",\n                #              filter_opts = [req_id],\n                #              sort=True\n                #              )\n        return True\n\n    s3.prep = prep\n\n    rheader = commit_rheader\n\n    output = s3_rest_controller(module, resourcename, rheader=rheader)\n\n    return output\n\n# -----------------------------------------------------------------------------\ndef commit_rheader(r):\n    """ Resource Header for Commitments """\n\n    if r.representation == "html":\n        record = r.record\n        if record and r.name == "commit":\n\n            s3_date_represent = s3base.S3DateTime.date_represent\n\n            tabs = [(T("Edit Details"), None)]\n            type = record.type and int(record.type)\n\n            table = r.table\n            if type == 1:\n                tabs.append((T("Items"), "commit_item"))\n\n                #req_record = db.req_req[record.req_id]\n                #req_date = req_record.date\n                rheader = DIV( TABLE( TR( TH( "%s: " % table.req_id.label),\n                                          table.req_id.represent(record.req_id),\n                                         ),\n                                      TR( TH( "%s: " % T("Committing Warehouse")),\n                                          s3db.org_site_represent(record.site_id),\n                                          TH( "%s: " % T("Commit Date")),\n                                          s3_date_represent(record.date),\n                                          ),\n                                      TR( TH( "%s: " % table.comments.label),\n                                          TD(record.comments, _colspan=3)\n                                          ),\n                                         ),\n                                        )\n                prepare_btn = A( T("Send Commitment"),\n                              _href = URL(c = "inv",\n                                          f = "send_commit",\n                                          args = [record.id]\n                                          ),\n                              _id = "send_commit",\n                              _class = "action-btn"\n                              )\n\n                s3.rfooter = TAG[""](prepare_btn)\n\n#                send_btn = A( T("Send Commitment as Shipment"),\n#                              _href = URL(c = "inv",\n#                                          f = "send_commit",\n#                                          args = [record.id]\n#                                          ),\n#                              _id = "send_commit",\n#                              _class = "action-btn"\n#                              )\n#\n#                send_btn_confirm = SCRIPT("S3ConfirmClick(\'#send_commit\', \'%s\')" %\n#                                          T("Do you want to send these Committed items?") )\n#                s3.rfooter = TAG[""](send_btn,send_btn_confirm)\n                #rheader.append(send_btn)\n                #rheader.append(send_btn_confirm)\n\n            elif type == 3:\n                tabs.append((T("People"), "commit_person"))\n\n                #req_record = db.req_req[record.req_id]\n                #req_date = req_record.date\n                organisation_represent = s3db.org_organisation_represent\n                rheader = DIV( TABLE( TR( TH( "%s: " % table.req_id.label),\n                                          table.req_id.represent(record.req_id),\n                                         ),\n                                      TR( TH( "%s: " % T("Committing Organization")),\n                                          organisation_represent(record.organisation_id),\n                                          TH( "%s: " % T("Commit Date")),\n                                          s3_date_represent(record.date),\n                                          ),\n                                      TR( TH( "%s: " % table.comments.label),\n                                          TD(record.comments, _colspan=3)\n                                          ),\n                                         ),\n                                        )\n            else:\n                # Other (& Assets/Shelter)\n                rheader = DIV( TABLE( TR( TH( "%s: " % table.req_id.label),\n                                          table.req_id.represent(record.req_id),\n                                         ),\n                                      TR( TH( "%s: " % T("Committing Person")),\n                                          s3db.pr_person_represent(record.committer_id),\n                                          TH( "%s: " % T("Commit Date")),\n                                          s3_date_represent(record.date),\n                                          ),\n                                      TR( TH( "%s: " % table.comments.label),\n                                          TD(record.comments or "", _colspan=3)\n                                          ),\n                                         ),\n                                        )\n\n            rheader_tabs = s3_rheader_tabs(r,\n                                           tabs)\n            rheader.append(rheader_tabs)\n\n            return rheader\n    return None\n\n# =============================================================================\ndef commit_item():\n    """ REST Controller """\n\n    return s3_rest_controller()\n\n# =============================================================================\ndef commit_req():\n    """\n        function to commit items according to a request.\n        copy data from a req into a commitment\n        arg: req_id\n        vars: site_id\n    """\n\n    req_id = request.args[0]\n    r_req = s3db.req_req[req_id]\n    site_id = request.vars.get("site_id")\n\n    # User must have permissions over facility which is sending\n    (prefix, resourcename, id) = s3db.get_instance(s3db.org_site, site_id)\n    if not site_id or not auth.s3_has_permission("update",\n                                                 "%s_%s" % (prefix,\n                                                            resourcename),\n                                                 record_id=id):\n        session.error = T("You do not have permission to make this commitment.")\n        redirect(URL(c="req", f="req",\n                     args=[req_id]))\n\n    # Create a new commit record\n    commit_id = s3db.req_commit.insert(date = request.utcnow,\n                                       req_id = req_id,\n                                       site_id = site_id,\n                                       type = r_req.type\n                                       )\n\n    # Only select items which are in the warehouse\n    ritable = s3db.req_req_item\n    iitable = s3db.inv_inv_item\n    query = (ritable.req_id == req_id) & \\\n            (ritable.quantity_fulfil < ritable.quantity) & \\\n            (iitable.site_id == site_id) & \\\n            (ritable.item_id == iitable.item_id) & \\\n            (ritable.deleted == False)  & \\\n            (iitable.deleted == False)\n    req_items = db(query).select(ritable.id,\n                                 ritable.quantity,\n                                 ritable.item_pack_id,\n                                 iitable.item_id,\n                                 iitable.quantity,\n                                 iitable.item_pack_id)\n\n    citable = s3db.req_commit_item\n    for req_item in req_items:\n        req_item_quantity = req_item.req_req_item.quantity * \\\n                            req_item.req_req_item.pack_quantity\n\n        inv_item_quantity = req_item.inv_inv_item.quantity * \\\n                            req_item.inv_inv_item.pack_quantity\n\n        if inv_item_quantity > req_item_quantity:\n            commit_item_quantity = req_item_quantity\n        else:\n            commit_item_quantity = inv_item_quantity\n        commit_item_quantity = commit_item_quantity / req_item.req_req_item.pack_quantity\n\n        if commit_item_quantity:\n            commit_item_id = citable.insert(commit_id = commit_id,\n                                            req_item_id = req_item.req_req_item.id,\n                                            item_pack_id = req_item.req_req_item.item_pack_id,\n                                            quantity = commit_item_quantity\n                                            )\n\n            # Update the req_item.commit_quantity  & req.commit_status\n            s3mgr.store_session("req", "commit_item", commit_item_id)\n            s3db.req_commit_item_onaccept(None)\n\n    # Redirect to commit\n    redirect(URL(c="req", f="commit",\n                 args=[commit_id, "commit_item"]))\n\n# =============================================================================\ndef send_req():\n    """\n        function to send items according to a request.\n        copy data from a req into a send\n        arg: req_id\n        vars: site_id\n    """\n\n    ritable = s3db.req_req_item\n    iitable = s3db.inv_inv_item\n    sendtable = s3db.inv_send\n    tracktable = s3db.inv_track_item\n    siptable = s3db.supply_item_pack\n\n    req_id = request.args[0]\n    r_req = s3db.req_req[req_id]\n    site_id = request.vars.get("site_id")\n\n    # User must have permissions over facility which is sending\n    (prefix, resourcename, id) = s3db.get_instance(db.org_site, site_id)\n    if not site_id or not auth.s3_has_permission("update",\n                                                 "%s_%s" % (prefix,\n                                                            resourcename),\n                                                 record_id=id):\n        session.error = T("You do not have permission to send this shipment.")\n        redirect(URL(c="req", f="req",\n                     args = [req_id]))\n\n    # Create a new send record\n    code = s3db.inv_get_shipping_code("WB",\n                                      site_id,\n                                      s3db.inv_send.send_ref\n                                     )\n    send_id = sendtable.insert(send_ref = code,\n                               req_ref = r_req.req_ref,\n                               sender_id = auth.s3_logged_in_person(),\n                               site_id = site_id,\n                               date = request.utcnow,\n                               recipient_id = r_req.requester_id,\n                               to_site_id = r_req.site_id,\n                               status = s3db.inv_ship_status["IN_PROCESS"],\n                              )\n\n    # Get the items for this request that have not been fulfilled (in transit)\n    query = (ritable.req_id == req_id) & \\\n            (ritable.quantity_transit < ritable.quantity) & \\\n            (ritable.deleted == False)\n    req_items = db(query).select(ritable.id,\n                                 ritable.quantity,\n                                 ritable.quantity_transit,\n                                 ritable.item_id,\n                                 ritable.item_pack_id,\n                                )\n\n    # loop through each request item and find matched in the site inventory\n    for req_i in req_items:\n        query = (iitable.item_id == req_i.item_id) & \\\n                (iitable.quantity > 0) & \\\n                (iitable.site_id == site_id) & \\\n                (iitable.deleted == False)\n        inv_items = db(query).select(iitable.id,\n                                     iitable.item_id,\n                                     iitable.quantity,\n                                     iitable.item_pack_id,\n                                     iitable.pack_value,\n                                     iitable.currency,\n                                     iitable.expiry_date,\n                                     iitable.bin,\n                                     iitable.owner_org_id,\n                                     iitable.supply_org_id,\n                                    )\n        # if their is a single match then set up a tracktable record\n        # get the request pack_quantity\n        req_p_qnty = siptable[req_i.item_pack_id].quantity\n        req_qnty = req_i.quantity\n        req_qnty_in_t = req_i.quantity_transit\n        req_qnty_wanted = (req_qnty - req_qnty_in_t) * req_p_qnty\n        # insert the track item records\n        # if their is more than one item match then set the quantity to 0\n        # and add the quantity requested in the comments\n        for inv_i in inv_items:\n            # get inv_item.pack_quantity\n            if len(inv_items) == 1:\n                # Remove this total from the warehouse stock\n                send_item_quantity = s3db.inv_remove(inv_i, req_qnty_wanted)\n            else:\n                send_item_quantity = 0\n            comment = "%d items needed to match total request" % req_qnty_wanted\n            tracktable.insert(send_id = send_id,\n                              send_inv_item_id = inv_i.id,\n                              item_id = inv_i.item_id,\n                              req_item_id = req_i.id,\n                              item_pack_id = inv_i.item_pack_id,\n                              quantity = send_item_quantity,\n                              status = s3db.inv_tracking_status["IN_PROCESS"],\n                              pack_value = inv_i.pack_value,\n                              currency = inv_i.currency,\n                              bin = inv_i.bin,\n                              expiry_date = inv_i.expiry_date,\n                              owner_org_id = inv_i.owner_org_id,\n                              supply_org_id = inv_i.supply_org_id,\n                              comments = comment,\n                             )\n    # Redirect to commit\n    redirect(URL(c = "inv",\n                 f = "send",\n                 args = [send_id, "track_item"]))\n\n# =============================================================================\ndef commit_item_json():\n    """\n    """\n\n    ctable = s3db.req_commit\n    itable = s3db.req_commit_item\n    stable = s3db.org_site\n    #ctable.date.represent = lambda dt: dt[:10]\n    query = (itable.req_item_id == request.args[0]) & \\\n            (ctable.id == itable.commit_id) & \\\n            (ctable.site_id == stable.id) & \\\n            (itable.deleted == False)\n    records = db(query).select(ctable.id,\n                               ctable.date,\n                               stable.name,\n                               itable.quantity,\n                               orderby = db.req_commit.date)\n\n    json_str = \'\'\'[%s,%s\'\'\' % (json.dumps(dict(id = str(T("Committed")),\n                                               quantity = "#")),\n                               records.json()[1:])\n\n    response.headers["Content-Type"] = "application/json"\n    return json_str\n\n# END =========================================================================\n\nresponse._vars=response._caller(req)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/web2py/gluon/restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "/home/web2py/applications/eden/controllers/req.py", line 847, in <module>\n  File "/home/web2py/gluon/globals.py", line 186, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/web2py/applications/eden/controllers/req.py", line 55, in req\n    req_table = s3db.req_req\n  File "applications/eden/modules/s3/s3model.py", line 159, in __getattr__\n    AttributeError("undefined table: %s" % name))\n  File "applications/eden/modules/s3/s3model.py", line 213, in table\n    model(prefix)\n  File "applications/eden/modules/s3/s3model.py", line 92, in __init__\n    env = self.model()\n  File "applications/eden/modules/eden/req.py", line 180, in model\n    widget="date",\n  File "applications/eden/modules/s3/s3fields.py", line 1030, in s3_datetime\n    month=future_month)\nValueError: month must be in 1..12\n'
p11
s.