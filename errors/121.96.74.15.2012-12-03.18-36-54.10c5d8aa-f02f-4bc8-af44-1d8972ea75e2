(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> month must be in 1..12"
p3
sS'layer'
p4
S'/home/web2py/applications/eden/controllers/inv.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n"""\n    Inventory Management\n\n    A module to record inventories of items at a locations (sites),\n    including Warehouses, Offices, Shelters & Hospitals\n"""\n\nmodule = request.controller\nresourcename = request.function\n\nif not settings.has_module(module):\n    raise HTTP(404, body="Module disabled: %s" % module)\n\n# -----------------------------------------------------------------------------\ndef index():\n    """\n        Application Home page\n        - custom View\n    """\n\n    # Need CRUD String\n    table = s3db.table("cr_shelter", None)\n\n    module_name = settings.modules[module].name_nice\n    response.title = module_name\n    if s3.debug:\n        # Start of TEST CODE for multiple dataTables,\n        #this also required views/inv/index.html to be modified\n        from s3.s3utils import S3DataTable\n        request = current.request\n        vars = current.request.get_vars\n        if request.extension == "html" or request.vars.id == "warehouse_list_1":\n            resource = s3db.resource("inv_warehouse")\n            totalrows = resource.count()\n            list_fields = ["id",\n                           "name",\n                           "organisation_id",\n                           ]\n            start = int(vars.iDisplayStart) if vars.iDisplayStart else 0\n            limit = int(vars.iDisplayLength) if vars.iDisplayLength else s3mgr.ROWSPERPAGE\n            rfields = resource.resolve_selectors(list_fields)[0]\n            (orderby, filter) = S3DataTable.getControlData(rfields, current.request.vars)\n            resource.add_filter(filter)\n            filteredrows = resource.count()\n            rows = resource.select(list_fields,\n                                   orderby="organisation_id",\n                                   start=start,\n                                   limit=limit,\n                                   )\n            data = resource.extract(rows,\n                                    list_fields,\n                                    represent=True,\n                                    )\n            dt = S3DataTable(rfields, data)\n            dt.defaultActionButtons(resource)\n            if request.extension == "html":\n                warehouses = dt.html(totalrows,\n                                     filteredrows,\n                                     "warehouse_list_1",\n                                     dt_bFilter="true",\n                                     dt_group=2,\n                                     dt_ajax_url=URL(c="inv",\n                                                  f="index",\n                                                  extension="aadata",\n                                                  vars={"id":"warehouse_list_1"},\n                                                  ),\n                                     )\n            else:\n                warehouse = dt.json(totalrows,\n                                    filteredrows,\n                                    "warehouse_list_1",\n                                    int(request.vars.sEcho),\n                                    )\n                return warehouse\n        # Second Table\n        if request.extension == "html" or request.vars.id == "inventory_list_1":\n            if "Adjust" in request.post_vars:\n                if request.post_vars.selected == "":\n                    inventory = "Well you could have selected something :("\n                else:\n                    inventory = "Adjustment not currently supported... :-) you selected the following items: %s" % request.post_vars.selected\n            else:\n                resource = s3db.resource("inv_inv_item")\n                totalrows = resource.count()\n                table = resource.table\n                stable = s3db.supply_item\n                list_fields = ["id",\n                               "site_id",\n                               "item_id$name",\n                               "quantity",\n                               "pack_value",\n                               "total_value",\n                               ]\n                rfields = resource.resolve_selectors(list_fields)[0]\n                (orderby, filter) = S3DataTable.getControlData(rfields, current.request.vars)\n                resource.add_filter(filter)\n                (rfields, joins, left, distinct) = resource.resolve_selectors(list_fields)\n                site_list = {}\n                rows = resource.select(list_fields,\n                                       limit=resource.count())\n                filteredrows = len(rows.records)\n                for row in rows:\n                    site_id = row.inv_inv_item.site_id\n                    if site_id not in site_list:\n                        site_list[site_id] = 1\n                    else:\n                        site_list[site_id] += 1\n                formatted_site_list = {}\n                repr = table.site_id.represent\n                for (key,value) in site_list.items():\n                    formatted_site_list[str(repr(key))] = value\n                if isinstance(orderby, bool):\n                    orderby = table.site_id | stable.name | ~table.quantity\n                start = int(vars.iDisplayStart) if vars.iDisplayStart else 0\n                limit = int(vars.iDisplayLength) if vars.iDisplayLength else s3mgr.ROWSPERPAGE\n                rows = resource.select(list_fields,\n                                       orderby=orderby,\n                                       start=start,\n                                       limit=limit,\n                                       )\n                data = resource.extract(rows,\n                                        list_fields,\n                                        represent=True,\n                                        )\n                dt = S3DataTable(rfields,\n                                 data,\n                                 orderby=orderby,\n                                 )\n                custom_actions = [dict(label=str(T("Warehouse")),\n                                  _class="action-icon",\n                                  icon="/%s/static/img/markers/gis_marker.image.Agri_Commercial_Food_Distribution_Center_S1.png" % appname,\n                                  url=URL(c="inv", f="warehouse",\n                                          args=["[id]", "update"]\n                                          )\n                                  ),\n                                 ]\n                dt.defaultActionButtons(resource, custom_actions)\n                if request.extension == "html":\n                    rows = current.db(table.quantity<100.0).select(table.id, table.quantity)\n                    errorList = []\n                    warningList = []\n                    alertList = []\n                    for row in rows:\n                        if row.quantity < 0.0:\n                            errorList.append(row.id)\n                        elif row.quantity == 0.0:\n                            warningList.append(row.id)\n                        else:\n                            alertList.append(row.id)\n                    inventory = dt.html(totalrows,\n                                        filteredrows,\n                                        "inventory_list_1",\n                                        dt_bFilter="true",\n                                        dt_group=[1,2],\n                                        dt_group_totals=[formatted_site_list],\n                                        dt_action_col=-1,\n                                        dt_ajax_url=URL(c="inv",\n                                                     f="index",\n                                                     extension="aadata",\n                                                     vars={"id":"inventory_list_1"},\n                                                     ),\n                                        dt_bulk_actions = "Adjust",\n                                        dt_styles = {"dtdisable": errorList,\n                                                     "dtwarning": warningList,\n                                                     "dtalert": alertList,\n                                                     },\n                                        #dt_text_maximum_len = 10,\n                                        #dt_text_condense_len = 8,\n                                        #dt_group_space = "true",\n                                        dt_shrink_groups = "accordion",\n                                        #dt_shrink_groups = "individual",\n                                        )\n\n                    s3.actions = None\n                elif request.extension == "aadata":\n                    inventory = dt.json(totalrows,\n                                        filteredrows,\n                                        "inventory_list_1",\n                                        int(request.vars.sEcho),\n                                        dt_action_col=-1,\n                                        dt_bulk_actions = "Adjust",\n                                        dt_group_totals=[formatted_site_list],\n                                        )\n                    return inventory\n                else:\n                    # Probably not the way to do it.... but\n                    s3db.configure("inv_inv_item",\n                                   list_fields=list_fields,\n                                   report_groupby="site_id",\n                                   pdf_groupby="site_id",\n                                   )\n                    s3.filter = filter\n                    r = s3_request("inv", "inv_item",\n                                   vars={"orderby" : orderby})\n                    r.resource = resource\n                    output = r(\n                               pdf_groupby=\'site_id\',\n                               dt_group=1,\n                               )\n                    return output\n        # Third table\n        if request.extension == "html" or request.vars.id == "supply_list_1":\n            resource = s3db.resource("supply_item")\n            totalrows = displayrows = resource.count()\n            list_fields = ["id",\n                           "name",\n                           "um",\n                           "model",\n                           ]\n            limit = int(vars.iDisplayLength) if vars.iDisplayLength else s3mgr.ROWSPERPAGE\n            rows = resource.select(list_fields,\n                                   start=0,\n                                   limit=resource.count(),\n                                   )\n            data = resource.extract(rows,\n                                    list_fields,\n                                    represent=True,\n                                    )\n            rfields = resource.resolve_selectors(list_fields)[0]\n            dt = S3DataTable(rfields, data)\n            dt.defaultActionButtons(resource)\n            if request.extension == "html":\n                supply_items = dt.html(totalrows,\n                                       displayrows,\n                                       "supply_list_1",\n                                       dt_displayLength=10,\n                                       dt_action_col=1,\n                                       dt_ajax_url=URL(c="inv",\n                                                       f="index",\n                                                       extension="aadata",\n                                                       vars={"id": "supply_list_1"},\n                                                       ),\n                                       )\n            else:\n                supply_items = dt.json(totalrows,\n                                       displayrows,\n                                       "supply_list_1",\n                                       int(request.vars.sEcho),\n                                       dt_action_col=1,\n                                       )\n                return supply_items\n        r = s3_request(prefix = "inv", name = "inv_item")\n        return dict(module_name=module_name,\n                    warehouses = warehouses,\n                    inventory = inventory,\n                    supply_items = supply_items,\n                    r = r,\n                    )\n        # End of TEST CODE\n    return dict(module_name=module_name)\n\n# -----------------------------------------------------------------------------\ndef warehouse():\n    """\n        RESTful CRUD controller\n    """\n\n    if "viewing" in request.get_vars:\n        viewing = request.get_vars.viewing\n        tn, id = viewing.split(".", 1)\n        if tn == "inv_warehousec":\n            request.args.insert(0, id)\n\n    # CRUD pre-process\n    def prep(r):\n        \n        if r.id:\n            r.table.obsolete.readable = r.table.obsolete.writable = True\n\n        if r.component:\n            if r.component.name == "inv_item":\n                # Filter out items which are already in this inventory\n                s3db.inv_prep(r)\n                # Remove the Warehouse Name from the list_fields\n                list_fields = s3db.get_config("inv_inv_item", "list_fields")\n                try:\n                    list_fields.remove("site_id")\n                    s3db.configure("inv_inv_item", list_fields=list_fields)\n                except:\n                    pass\n\n            elif r.component.name == "recv" or \\\n                 r.component.name == "send":\n                # Filter out items which are already in this inventory\n                s3db.inv_prep(r)\n\n            elif r.component.name == "human_resource":\n                # Filter out people which are already staff for this warehouse\n                s3base.s3_filter_staff(r)\n                # Cascade the organisation_id from the hospital to the staff\n                htable = s3db.hrm_human_resource\n                htable.organisation_id.default = r.record.organisation_id\n                htable.organisation_id.writable = False\n\n            elif r.component.name == "req":\n                s3db.req_prep(r)\n                if r.method != "update" and r.method != "read":\n                    # Hide fields which don\'t make sense in a Create form\n                    # inc list_create (list_fields over-rides)\n                    s3db.req_create_form_mods()\n\n        # "show_obsolete" var option can be added (btn?) later to\n        # disable this filter\n        if r.method in [None, "list"] and \\\n            not r.vars.get("show_obsolete", False):\n            r.resource.add_filter(s3db.inv_warehouse.obsolete != True)\n        return True\n    s3.prep = prep\n\n    # CRUD post-process\n    def postp(r, output):\n        if r.interactive and not r.component and r.method != "import":\n            # Change Action buttons to open Stock Tab by default\n            read_url = URL(f="warehouse", args=["[id]", "inv_item"])\n            update_url = URL(f="warehouse", args=["[id]", "inv_item"])\n            s3mgr.crud.action_buttons(r,\n                                      read_url=read_url,\n                                      update_url=update_url)\n        if "add_btn" in output:\n            del output["add_btn"]\n        return output\n    s3.postp = postp\n\n    if "extra_data" in request.get_vars:\n        resourcename = "inv_item"\n    else:\n        resourcename = "warehouse"\n    csv_stylesheet = "%s.xsl" % resourcename\n\n    output = s3_rest_controller(module, resourcename,\n                                rheader=s3db.inv_warehouse_rheader,\n                                csv_template = resourcename,\n                                csv_stylesheet = csv_stylesheet,\n                                # Extra fields for CSV uploads:\n                                #csv_extra_fields = [\n                                #         dict(label="Organisation",\n                                #         field=s3db.org_organisation_id(comment=None))\n                                #]\n                                )\n    if "add_btn" in output:\n        del output["add_btn"]\n    return output\n\n# -----------------------------------------------------------------------------\ndef supplier():\n    current.request.get_vars["organisation.organisation_type_id$name"] = "Supplier"\n    return s3db.org_organisation_controller()\n\n# =============================================================================\ndef inv_item():\n    """ REST Controller """\n\n    tablename = "inv_inv_item"\n    # Load model to be able to override CRUD string(s)\n    table = s3db[tablename]\n    s3.crud_strings[tablename].msg_list_empty = T("No Stock currently registered")\n\n    if "report" in request.get_vars and \\\n       request.get_vars.report == "mon":\n            s3.crud_strings[tablename].update(dict(\n                title_list = T("Monetization Report"),\n                subtitle_list = T("Monetization Details"),\n                msg_list_empty = T("No Stock currently registered"),\n                title_search = T("Monetization Report"),\n              ))\n            s3db.configure(tablename,\n                           list_fields = ["id",\n                                          (T("Donor"), "supply_org_id"),\n                                          (T("Items/Description"), "item_id"),\n                                          (T("Quantity"), "quantity"),\n                                          (T("Unit"), "item_pack_id"),\n                                          (T("Unit Value"), "pack_value"),\n                                          (T("Total Value"), "total_value"),\n                                          (T("Remarks"), "comments"),\n                                          "received_date",\n                                          "expiry_date",\n                                          "status",\n                                          "status",\n                                          ]\n                           )\n    else:\n        s3db.configure(tablename,\n                       insertable=False,\n                       list_fields = ["id",\n                                      "site_id",\n                                      "item_id",\n                                      (T("Item Code"), "item_code"),\n                                      (T("Category"), "item_category"),\n                                      "quantity",\n                                      "pack_value",\n                                      #(T("Total Value"), "total_value"),\n                                      "received_date",\n                                      "expiry_date",\n                                      "status",\n                                      ]\n                       )\n\n    # Upload for configuration (add replace option)\n    s3.importerPrep = lambda: dict(ReplaceOption=T("Remove existing data before import"))\n\n    # if this url has a viewing track items then redirect to track_movement\n    if "viewing" in request.get_vars:\n        viewing = request.get_vars.viewing\n        tn, id = viewing.split(".", 1)\n        if tn == "inv_track_item":\n            record = s3db.inv_track_item[id]\n            redirect(URL(c = "inv",\n                         f = "track_movement",\n                         args = [],\n                         vars = {"viewing" : "%s.%s" % ("inv_inv_item", record.item_id)}\n                        )\n                     )\n    def prep(r):\n        if r.method != "search" and r.method != "report":\n            s3.dataTable_group = 1\n        return True\n    s3.prep = prep\n\n    # Import pre-process\n    def import_prep(data):\n        """\n            Deletes all Stock records of the organisation\n            before processing a new data import, used for the import_prep\n            hook in s3mgr\n        """\n        request = current.request\n        resource, tree = data\n        xml = current.xml\n        tag = xml.TAG\n        att = xml.ATTRIBUTE\n        if s3.importerReplace:\n            if tree is not None:\n                root = tree.getroot()\n                expr = "/%s/%s[@%s=\'org_organisation\']/%s[@%s=\'name\']" % \\\n                       (tag.root, tag.resource, att.name, tag.data, att.field)\n                orgs = root.xpath(expr)\n                otable = s3db.org_organisation\n                stable = s3db.org_site\n                itable = s3db.inv_inv_item\n                for org in orgs:\n                    org_name = org.get("value", None) or org.text\n                    if org_name:\n                        try:\n                            org_name = json.loads(xml.xml_decode(org_name))\n                        except:\n                            pass\n                    if org_name:\n                        query = (otable.name == org_name) & \\\n                                (stable.organisation_id == otable.id) & \\\n                                (itable.site_id == stable.id)\n                        resource = s3db.resource("inv_inv_item", filter=query)\n                        ondelete = s3db.get_config("inv_inv_item", "ondelete")\n                        resource.delete(ondelete=ondelete, format="xml")\n            resource.skip_import = True\n    s3mgr.import_prep = import_prep\n\n\n    # Limit site_id to sites the user has permissions for\n    auth.permitted_facilities(table=table,\n                              error_msg=T("You do not have permission for any site to add an inventory item."))\n\n    if len(request.args) > 1 and request.args[1] == "track_item":\n        # remove CRUD generated buttons in the tabs\n        s3db.configure("inv_track_item",\n                       create=False,\n                       listadd=False,\n                       editable=False,\n                       deletable=False,\n                       )\n\n    output = s3_rest_controller(rheader=s3db.inv_warehouse_rheader,\n                                #csv_extra_fields = [dict(label="Organisation",\n                                #                         field=s3db.org_organisation_id(comment=None))\n                                #                    ],\n                                pdf_paper_alignment = "Landscape",\n                                pdf_table_autogrow = "B",\n                                pdf_groupby = "site_id, item_id",\n                                pdf_orderby = "expiry_date, supply_org_id",\n                                )\n    if "add_btn" in output:\n        del output["add_btn"]\n    return output\n\n# -----------------------------------------------------------------------------\ndef track_movement():\n    """ REST Controller """\n\n    table = s3db.inv_track_item\n\n    s3db.configure("inv_track_item",\n                   create=False,\n                   listadd=False,\n                   editable=False,\n                   deletable=False,\n                   )\n\n    def prep(r):\n        if r.interactive:\n            if "viewing" in request.vars:\n                dummy, item_id = request.vars.viewing.split(".")\n                filter = (table.send_inv_item_id == item_id ) | \\\n                         (table.recv_inv_item_id == item_id)\n                s3.filter = filter\n        return True\n    s3.prep = prep\n\n    output = s3_rest_controller("inv", "track_item",\n                                rheader=s3db.inv_warehouse_rheader,\n                                )\n    if "add_btn" in output:\n        del output["add_btn"]\n    return output\n\n# -----------------------------------------------------------------------------\ndef inv_item_quantity():\n    """\n    """\n\n    table = s3db.inv_inv_item\n    ptable = s3db.supply_item_pack\n    query = (table.id == request.args[0]) & \\\n            (table.item_pack_id == ptable.id)\n    record = db(query).select(table.quantity,\n                              ptable.quantity,\n                              limitby=(0, 1)).first()\n                              \n    response.headers["Content-Type"] = "application/json"\n    return json.dumps(record)\n\n# -----------------------------------------------------------------------------\ndef inv_item_packs():\n    """\n        Called by S3FilterFieldChange to provide the pack options for a\n            particular Item\n    """\n\n    table = s3db.inv_inv_item\n    ptable = s3db.supply_item_pack\n    query = (table.id == request.args[0]) & \\\n            (table.item_id == ptable.item_id)\n    records = db(query).select(ptable.id,\n                               ptable.name,\n                               ptable.quantity)\n                               \n    response.headers["Content-Type"] = "application/json"\n    return records.json()\n\n# =============================================================================\ndef send():\n    """ RESTful CRUD controller """\n\n    sendtable = s3db.inv_send\n    tracktable = s3db.inv_track_item\n\n    # Limit site_id to sites the user has permissions for\n    error_msg = T("You do not have permission for any facility to send a shipment.")\n    auth.permitted_facilities(table=sendtable, error_msg=error_msg)\n\n    # Set Validator for checking against the number of items in the warehouse\n    vars = request.vars\n    if (vars.send_inv_item_id):\n        if not vars.item_pack_id:\n            vars.item_pack_id = s3db.inv_inv_item[vars.send_inv_item_id].item_pack_id\n        s3db.inv_track_item.quantity.requires = QUANTITY_INV_ITEM(db,\n                                                                 vars.send_inv_item_id,\n                                                                 vars.item_pack_id)\n\n    SHIP_STATUS_IN_PROCESS = s3db.inv_ship_status["IN_PROCESS"]\n    SHIP_STATUS_SENT = s3db.inv_ship_status["SENT"]\n    SHIP_STATUS_RECEIVED = s3db.inv_ship_status["RECEIVED"]\n    SHIP_STATUS_CANCEL = s3db.inv_ship_status["CANCEL"]\n    SHIP_STATUS_RETURNING  = s3db.inv_ship_status["RETURNING"]\n\n    def set_send_attr(status):\n        sendtable.send_ref.writable = False\n        if status == SHIP_STATUS_IN_PROCESS:\n            sendtable.send_ref.readable = False\n        else:\n            # Make all fields writable False\n            for field in sendtable.fields:\n                sendtable[field].writable = False\n\n    TRACK_STATUS_UNKNOWN    = s3db.inv_tracking_status["UNKNOWN"]\n    TRACK_STATUS_PREPARING  = s3db.inv_tracking_status["IN_PROCESS"]\n    TRACK_STATUS_TRANSIT    = s3db.inv_tracking_status["SENT"]\n    TRACK_STATUS_UNLOADING  = s3db.inv_tracking_status["UNLOADING"]\n    TRACK_STATUS_ARRIVED    = s3db.inv_tracking_status["RECEIVED"]\n    TRACK_STATUS_CANCELED   = s3db.inv_tracking_status["CANCEL"]\n    TRACK_STATUS_RETURNING  = s3db.inv_tracking_status["RETURNING"]\n\n    def set_track_attr(status):\n        # By default Make all fields writable False\n        for field in tracktable.fields:\n            tracktable[field].writable = False\n        # Hide some fields\n        tracktable.send_id.readable = False\n        tracktable.recv_id.readable = False\n        tracktable.bin.readable = False\n        tracktable.item_id.readable = False\n        tracktable.recv_quantity.readable = False\n        tracktable.return_quantity.readable = False\n        tracktable.expiry_date.readable = False\n        tracktable.owner_org_id.readable = False\n        tracktable.supply_org_id.readable = False\n        tracktable.adj_item_id.readable = False\n        if status == TRACK_STATUS_PREPARING:\n            # show some fields\n            tracktable.send_inv_item_id.writable = True\n            tracktable.item_pack_id.writable = True\n            tracktable.quantity.writable = True\n            tracktable.comments.writable = True\n            # hide some fields\n            tracktable.currency.readable = False\n            tracktable.pack_value.readable = False\n            tracktable.item_source_no.readable = False\n            tracktable.inv_item_status.readable = False\n        elif status == TRACK_STATUS_ARRIVED:\n            # Shipment arrived display some extra fields at the destination\n            tracktable.item_source_no.readable = True\n            tracktable.recv_quantity.readable = True\n            tracktable.return_quantity.readable = True\n            tracktable.recv_bin.readable = True\n            tracktable.currency.readable = True\n            tracktable.pack_value.readable = True\n        elif status == TRACK_STATUS_RETURNING:\n            tracktable.return_quantity.readable = True\n            tracktable.return_quantity.writable = True\n            tracktable.currency.readable = True\n            tracktable.pack_value.readable = True\n\n    def prep(r):\n        # Default to the Search tab in the location selector\n        s3.gis.tab = "search"\n        record = sendtable[r.id]\n        if record and record.status != SHIP_STATUS_IN_PROCESS:\n            # now that the shipment has been sent\n            # lock the record so that it can\'t be meddled with\n            s3db.configure("inv_send",\n                            create=False,\n                            listadd=False,\n                            editable=False,\n                            deletable=False,\n                           )\n\n        if r.component:\n            if record.status == SHIP_STATUS_RECEIVED or \\\n               record.status == SHIP_STATUS_CANCEL:\n                list_fields = ["id",\n                               "status",\n                               "item_id",\n                               "item_pack_id",\n                               "bin",\n                               "quantity",\n                               "currency",\n                               "pack_value",\n                               "recv_quantity",\n                               "return_quantity",\n                               "owner_org_id",\n                               "supply_org_id",\n                               "inv_item_status",\n                               "comments",\n                              ]\n            elif record.status == SHIP_STATUS_RETURNING:\n                list_fields = ["id",\n                               "status",\n                               "item_id",\n                               "item_pack_id",\n                               "quantity",\n                               "currency",\n                               "pack_value",\n                               "return_quantity",\n                               "bin",\n                               "owner_org_id",\n                               "supply_org_id",\n                               "inv_item_status",\n                              ]\n            else:\n                list_fields = ["id",\n                               "status",\n                               "item_id",\n                               "item_pack_id",\n                               "quantity",\n                               "currency",\n                               "pack_value",\n                               "bin",\n                               "owner_org_id",\n                               "supply_org_id",\n                               "inv_item_status",\n                              ]\n            s3db.configure("inv_track_item",\n                            list_fields=list_fields,\n                           )\n\n            # Can only create or delete track items for a send record if the status is preparing\n            if r.method == "create" or r.method == "delete":\n                if record.status != SHIP_STATUS_IN_PROCESS:\n                    return False\n            if r.method == "delete":\n                return s3.inv_track_item_deleting(r.component_id)\n            if r.record.get("site_id"):\n                # Restrict to items from this warehouse only\n                tracktable.send_inv_item_id.requires = IS_ONE_OF(db,\n                                                         "inv_inv_item.id",\n                                                         s3db.inv_item_represent,\n                                                         orderby="inv_inv_item.id",\n                                                         sort=True,\n                                                         filterby = "site_id",\n                                                         filter_opts = [r.record.site_id]\n                                                        )\n            # Hide the values that will be copied from the inv_inv_item record\n            if r.component_id:\n                track_record = tracktable[r.component_id]\n                set_track_attr(track_record.status)\n                # if the track record is linked to a request item then\n                # the stock item has already been selected so make it read only\n                if track_record and track_record.get("req_item_id"):\n                    tracktable.send_inv_item_id.writable = False\n                    tracktable.item_pack_id.writable = False\n                    stock_qnty = track_record.send_inv_item_id.quantity\n                    tracktable.quantity.comment = T("%d in stock" % stock_qnty)\n                    tracktable.quantity.requires = QUANTITY_INV_ITEM(db,\n                                                                 track_record.send_inv_item_id,\n                                                                 track_record.item_pack_id)\n                # Hide the item id\n                tracktable.item_id.readable = False\n            else:\n                set_track_attr(TRACK_STATUS_PREPARING)\n            if r.interactive:\n                if r.record.status == SHIP_STATUS_IN_PROCESS:\n                    s3.crud_strings.inv_send.title_update = \\\n                    s3.crud_strings.inv_send.title_display = T("Process Shipment to Send")\n                elif "site_id" in request.vars and r.record.status == SHIP_STATUS_SENT:\n                    s3.crud_strings.inv_send.title_update = \\\n                    s3.crud_strings.inv_send.title_display = T("Review Incoming Shipment to Receive")\n        else:\n            if request.get_vars.received:\n                # Set the items to being received\n                sendtable[r.id] = dict(status = SHIP_STATUS_RECEIVED)\n                db(tracktable.send_id == r.id).update(status = TRACK_STATUS_ARRIVED)\n                response.message = T("Shipment received")\n            # else set the inv_send attributes\n            elif r.id:\n                record = sendtable[r.id]\n                set_send_attr(record.status)\n            else:\n                set_send_attr(SHIP_STATUS_IN_PROCESS)\n                sendtable.send_ref.readable = False\n        return True\n\n    if len(request.args) > 1 and request.args[1] == "track_item":\n        # Shouldn\'t fail but...\n        # if user enters the send id then it could so wrap in a try...\n        try:\n            status = sendtable[request.args[0]].status\n        except:\n            status = None\n        if status:\n            editable = False\n            if status == SHIP_STATUS_RETURNING:\n                editable = True\n            # remove CRUD generated buttons in the tabs\n            s3db.configure("inv_track_item",\n                            create=False,\n                            listadd=False,\n                            editable=editable,\n                            deletable=False,\n                           )\n\n\n    s3.prep = prep\n    output = s3_rest_controller(rheader=s3.inv_send_rheader)\n    return output\n\n# ==============================================================================\ndef send_commit():\n    """\n    """\n\n    # Get the commit record\n    try:\n        commit_id = request.args[0]\n    except:\n        redirect(URL(c="req",\n                     f="commit"))\n\n    req_table = s3db.req_req\n    rim_table = s3db.req_req_item\n    com_table = s3db.req_commit\n    cim_table = s3db.req_commit_item\n    send_table = s3db.inv_send\n    track_table = s3db.inv_track_item\n\n    query = (com_table.id == commit_id) & \\\n            (com_table.req_id == req_table.id) & \\\n            (com_table.deleted == False)\n    record = db(query).select(limitby = (0, 1)).first()\n    # create a inv_send and link to the commit\n    send_id = send_table.insert(sender_id = record.req_commit.committer_id,\n                                site_id = record.req_commit.site_id,\n                                recipient_id = record.req_req.requester_id,\n                                to_site_id = record.req_req.site_id,\n                                status = 0)\n\n    # get all of the committed items\n    query = (cim_table.commit_id == commit_id) & \\\n            (cim_table.req_item_id == rim_table.id) & \\\n            (cim_table.deleted == False)\n    records = db(query).select()\n    # create inv_track_items for each commit item\n    for row in records:\n        id = track_table.insert(track_org_id = record.req_commit.organisation_id,\n                                send_id = send_id,\n                                status = 1,\n                                item_id = row.req_req_item.item_id,\n                                item_pack_id = row.req_req_item.item_pack_id,\n                                quantity = row.req_commit_item.quantity,\n                                currency = row.req_req_item.currency,\n                                req_item_id = row.req_req_item.id\n                                )\n        track_table(track_table.id == id).update(tracking_no = "TN:%6d" % (10000 + id))\n    # redirect to inv_send for the send id just created\n    redirect(URL(c = "inv",\n                 f = "send",\n                 args = [send_id, "track_item"]))\n\n# -----------------------------------------------------------------------------\ndef send_process():\n    """ Send a Shipment """\n\n    try:\n        send_id = request.args[0]\n    except:\n        redirect(URL(c="inv",\n                     f="send"))\n\n    stable = s3db.inv_send\n    tracktable = s3db.inv_track_item\n    siptable = s3db.supply_item_pack\n    rrtable = s3db.req_req\n    ritable = s3db.req_req_item\n\n    if not auth.s3_has_permission("update",\n                                  stable,\n                                  record_id=send_id):\n        session.error = T("You do not have permission to send this shipment.")\n\n    send_record = stable[send_id]\n\n    if send_record.status != eden.inv.inv_ship_status["IN_PROCESS"]:\n        session.error = T("This shipment has already been sent.")\n\n    # Get the track items that are part of this shipment\n    query = (tracktable.send_id == send_id ) & \\\n            (tracktable.deleted == False)\n    track_items = db(query).select()\n    if not track_items:\n        session.error = T("No items have been selected for shipping.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "send",\n                     args = [send_id]))\n\n    # Update Send record & lock for editing\n    stable[send_id] = dict(# date = request.utcnow,\n                           status = eden.inv.inv_ship_status["SENT"],\n                           owned_by_user = None,\n                           owned_by_group = ADMIN)\n    # if this is linked to a request then update the quantity in transit\n    req_ref = send_record.req_ref\n    query = (rrtable.req_ref == req_ref)\n    req_rec = db(query).select(rrtable.id, limitby = (0, 1)).first()\n    if req_rec:\n        req_id = req_rec.id\n        for track_item in track_items:\n            if track_item.req_item_id:\n                req_i = ritable[track_item.req_item_id]\n                req_p_qnty = siptable[req_i.item_pack_id].quantity\n                t_qnty = track_item.quantity\n                t_pack_id = track_item.item_pack_id\n                inv_p_qnty = siptable[t_pack_id].quantity\n                transit_quantity = t_qnty * inv_p_qnty / req_p_qnty\n                db(ritable.id == track_item.req_item_id).update(quantity_transit = ritable.quantity_transit + transit_quantity)\n        s3db.req_update_status(req_id)\n    # Create a Receive record\n    rtable = s3db.inv_recv\n    recv_id = rtable.insert(sender_id = send_record.sender_id,\n                            send_ref = send_record.send_ref,\n                            req_ref = send_record.req_ref,\n                            from_site_id = send_record.site_id,\n                            eta = send_record.delivery_date,\n                            recipient_id = send_record.recipient_id,\n                            site_id = send_record.to_site_id,\n                            comments = send_record.comments,\n                            status = eden.inv.inv_ship_status["SENT"],\n                            type = 1, # 1:"Another Inventory"\n                           )\n    # Change the status for all track items in this shipment to In transit\n    # and link to the receive record\n    db(tracktable.send_id == send_id).update(status = 2,\n                                             recv_id = recv_id)\n\n    session.confirmation = T("Shipment Items sent from Warehouse")\n    redirect(URL(c = "inv",\n                 f = "send",\n                 args = [send_id, "track_item"]))\n\n# -----------------------------------------------------------------------------\ndef send_returns():\n    """\n        This will cancel a shipment that has been sent\n\n        @todo need to roll back commitments\n    """\n\n    send_id = request.args[0]\n    stable = s3db.inv_send\n    rtable = s3db.inv_recv\n    tracktable = s3db.inv_track_item\n    if not auth.s3_has_permission("update",\n                                  stable,\n                                  record_id=send_id):\n        session.error = T("You do not have permission to return this sent shipment.")\n\n    send_record = stable[send_id]\n    if send_record.status == eden.inv.inv_ship_status["IN_PROCESS"]:\n        session.error = T("This shipment has not been sent - it cannot be returned because it can still be edited.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "send",\n                     args = [send_id],\n                     )\n                 )\n\n    # Okay no error so far, change the status to Returning\n    stable[send_id] = dict(date = request.utcnow,\n                           status = eden.inv.inv_ship_status["RETURNING"],\n                           owned_by_user = None,\n                           owned_by_group = ADMIN)\n    recv_row = db(tracktable.send_id == send_id).select(tracktable.recv_id,\n                                                        limitby = (0, 1)).first()\n    if recv_row:\n        recv_id = recv_row.recv_id\n        rtable[recv_id] = dict(date = request.utcnow,\n                               status = eden.inv.inv_ship_status["RETURNING"],\n                               owned_by_user = None,\n                               owned_by_group = ADMIN)\n    # Set all track items to status of returning\n    db(tracktable.send_id == send_id).update(status = eden.inv.inv_tracking_status["RETURNING"])\n    session.confirmation = T("Sent Shipment has returned, indicate how many items will be returned to Warehouse.")\n\n    redirect(URL(c = "inv",\n                 f = "send",\n                 args = [send_id, "track_item"]))\n# -----------------------------------------------------------------------------\ndef return_process():\n    """\n        Return some stock from a shipment back into the warehouse\n    """\n\n    send_id = request.args[0]\n    invtable = s3db.inv_inv_item\n    stable = s3db.inv_send\n    rtable = s3db.inv_recv\n    tracktable = s3db.inv_track_item\n    if not auth.s3_has_permission("update",\n                                  stable,\n                                  record_id=send_id):\n        session.error = T("You do not have permission to return this sent shipment.")\n\n    send_record = stable[send_id]\n    if send_record.status != eden.inv.inv_ship_status["RETURNING"]:\n        session.error = T("This shipment has not been returned.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "send",\n                     args = [send_id],\n                     )\n                 )\n\n    # Okay no error so far, let\'s move the goods back into the warehouse\n    # and then change the status to received\n    # Update Receive record & lock for editing\n    # Move each item to the site\n    track_rows = db(tracktable.send_id == send_id).select()\n    for track_item in track_rows:\n        send_inv_id = track_item.send_inv_item_id\n        return_qnty = track_item.return_quantity\n        if return_qnty == None:\n            return_qnty = 0\n        # update the receive quantity in the tracking record\n        tracktable[track_item.id] = dict (recv_quantity = track_item.quantity - return_qnty)\n        if return_qnty:\n            db(invtable.id == send_inv_id).update(quantity = invtable.quantity + return_qnty)\n\n\n    stable[send_id] = dict(date = request.utcnow,\n                           status = eden.inv.inv_ship_status["RECEIVED"],\n                           owned_by_user = None,\n                           owned_by_group = ADMIN)\n    recv_row = db(tracktable.send_id == send_id).select(tracktable.recv_id,\n                                                        limitby = (0, 1)).first()\n    if recv_row:\n        recv_id = recv_row.recv_id\n        rtable[recv_id] = dict(date = request.utcnow,\n                               status = eden.inv.inv_ship_status["RECEIVED"],\n                               owned_by_user = None,\n                               owned_by_group = ADMIN)\n    # Change the status for all track items in this shipment to Received\n    db(tracktable.send_id == send_id).update(status = eden.inv.inv_tracking_status["RECEIVED"])\n\n    redirect(URL(c = "inv",\n                 f = "send",\n                 args = [send_id]))\n\n# -----------------------------------------------------------------------------\ndef send_cancel():\n    """\n        This will cancel a shipment that has been sent\n\n        @todo need to roll back commitments\n    """\n\n    send_id = request.args[0]\n    stable = s3db.inv_send\n    rtable = s3db.inv_recv\n    tracktable = s3db.inv_track_item\n    if not auth.s3_has_permission("delete",\n                                  stable,\n                                  record_id=send_id):\n        session.error = T("You do not have permission to cancel this sent shipment.")\n\n    send_record = stable[send_id]\n    if send_record.status != eden.inv.inv_ship_status["SENT"]:\n        session.error = T("This shipment has not been sent - it has NOT been canceled because can still be edited.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "send",\n                     args = [send_id],\n                     )\n                 )\n\n    # Okay no error so far, let\'s delete that baby\n    # Change the send and recv status to cancelled\n    stable[send_id] = dict(date = request.utcnow,\n                           status = eden.inv.inv_ship_status["CANCEL"],\n                           owned_by_user = None,\n                           owned_by_group = ADMIN)\n    recv_row = db(tracktable.send_id == send_id).select(tracktable.recv_id,\n                                                        limitby = (0, 1)).first()\n    if recv_row:\n        recv_id = recv_row.recv_id\n        rtable[recv_id] = dict(date = request.utcnow,\n                               status = eden.inv.inv_ship_status["CANCEL"],\n                               owned_by_user = None,\n                               owned_by_group = ADMIN)\n\n\n    # Change the track items status to canceled and then delete them\n    # If they are linked to a request then the in transit total will also be reduced\n    # Records can only be deleted if the status is In Process (or preparing)\n    # so change the status before we delete\n    db(tracktable.send_id == send_id).update(status = eden.inv.inv_tracking_status["IN_PROCESS"])\n    track_rows = db(tracktable.send_id == send_id).select(tracktable.id)\n    for track_item in track_rows:\n        s3.inv_track_item_deleting(track_item.id)\n    # Now change the status to (cancelled)\n    db(tracktable.send_id == send_id).update(status = eden.inv.inv_tracking_status["CANCEL"])\n\n    session.confirmation = T("Sent Shipment canceled and items returned to Warehouse")\n\n    redirect(URL(c = "inv",\n                 f = "send",\n                 args = [send_id]))\n\n# =============================================================================\ndef recv():\n    """ RESTful CRUD controller """\n\n    recvtable = s3db.inv_recv\n    tracktable = s3db.inv_track_item\n    atable = s3db.inv_adj_item\n\n    # Limit site_id to sites the user has permissions for\n    if settings.get_inv_shipment_name() == "order":\n        error_msg = T("You do not have permission for any facility to add an order.")\n    else:\n        error_msg = T("You do not have permission for any facility to receive a shipment.")\n    auth.permitted_facilities(table=recvtable, error_msg=error_msg)\n\n    # The inv_recv record might be created when the shipment is send and so it\n    # might not have the recipient identified. If it is null then set it to\n    # the person who is logged in (the default)\n    id = request.args(0)\n    if id:\n        try:\n            if recvtable[id].recipient_id == None:\n                db(recvtable.id == id).update(recipient_id = auth.s3_logged_in_person())\n        except:\n            pass\n\n    status = s3db.inv_ship_status\n    SHIP_STATUS_IN_PROCESS = status["IN_PROCESS"]\n    SHIP_STATUS_SENT = status["SENT"]\n    SHIP_STATUS_RECEIVED = status["RECEIVED"]\n    SHIP_STATUS_CANCEL = status["CANCEL"]\n\n    def set_recv_attr(status):\n        recvtable.sender_id.readable = False\n        recvtable.sender_id.writable = False\n        recvtable.grn_status.readable = False\n        recvtable.grn_status.writable = False\n        recvtable.cert_status.readable = False\n        recvtable.cert_status.writable = False\n        recvtable.eta.readable = False\n        recvtable.req_ref.writable = True\n        if status == SHIP_STATUS_IN_PROCESS:\n            recvtable.send_ref.writable = True\n            recvtable.recv_ref.readable = False\n            recvtable.sender_id.readable = False\n        else:\n            # Make all fields writable False\n            for field in recvtable.fields:\n                recvtable[field].writable = False\n        if status == SHIP_STATUS_SENT:\n            recvtable.recipient_id.readable = True\n            recvtable.recipient_id.writable = True\n            recvtable.comments.writable = True\n\n    status = s3db.inv_tracking_status\n    TRACK_STATUS_UNKNOWN    = status["UNKNOWN"]\n    TRACK_STATUS_PREPARING  = status["IN_PROCESS"]\n    TRACK_STATUS_TRANSIT    = status["SENT"]\n    TRACK_STATUS_UNLOADING  = status["UNLOADING"]\n    TRACK_STATUS_ARRIVED    = status["RECEIVED"]\n    TRACK_STATUS_CANCELED   = status["CANCEL"]\n\n    def set_track_attr(status):\n        # By default Make all fields writable False\n        for field in tracktable.fields:\n            tracktable[field].writable = False\n        # Hide some fields\n        tracktable.send_id.readable = False\n        tracktable.recv_id.readable = False\n        tracktable.bin.readable = False\n        tracktable.adj_item_id.readable = False\n        tracktable.recv_quantity.readable = True\n        if status == TRACK_STATUS_PREPARING:\n            # show some fields\n            tracktable.item_source_no.writable = True\n            tracktable.item_id.writable = True\n            tracktable.item_pack_id.writable = True\n            tracktable.quantity.writable = True\n            tracktable.currency.writable = True\n            tracktable.pack_value.writable = True\n            tracktable.expiry_date.writable = True\n            tracktable.recv_bin.writable = True\n            tracktable.owner_org_id.writable = True\n            tracktable.supply_org_id.writable = True\n            tracktable.inv_item_status.writable = True\n            tracktable.comments.writable = True\n            tracktable.recv_quantity.readable = False\n            # hide some fields\n            tracktable.send_inv_item_id.readable = False\n            # change some labels - NO - use consistent labels\n            #tracktable.quantity.label = T("Quantity Delivered")\n            tracktable.recv_bin.label = T("Bin")\n        elif status == TRACK_STATUS_TRANSIT:\n            # Hide the values that will be copied from the inv_inv_item record\n            tracktable.send_inv_item_id.readable = False\n            tracktable.send_inv_item_id.writable = False\n            tracktable.item_source_no.readable = True\n            tracktable.item_source_no.writable = False\n            # Display the values that can only be entered on create\n            tracktable.recv_quantity.writable = True\n            tracktable.recv_bin.readable = True\n            tracktable.recv_bin.writable = True\n            tracktable.comments.writable = True\n            # This is a received purchase so change the label to reflect this - NO - use consistent labels\n            #tracktable.quantity.label =  T("Quantity Delivered")\n        elif status == TRACK_STATUS_ARRIVED:\n            tracktable.item_source_no.readable = True\n            tracktable.item_source_no.writable = False\n            tracktable.item_id.writable = False\n            tracktable.send_inv_item_id.writable = False\n            tracktable.item_pack_id.writable = False\n            tracktable.quantity.writable = False\n            tracktable.currency.writable = False\n            tracktable.pack_value.writable = False\n            tracktable.expiry_date.writable = False\n            tracktable.owner_org_id.writable = False\n            tracktable.supply_org_id.writable = False\n            tracktable.recv_bin.readable = True\n            tracktable.recv_bin.writable = True\n\n    def prep(r):\n        record = r.record\n        if (record and\n            (record.status != SHIP_STATUS_IN_PROCESS and\n             record.status != SHIP_STATUS_SENT)):\n            # now that the shipment has been sent\n            # lock the record so that it can\'t be meddled with\n            s3db.configure("inv_recv",\n                            create=False,\n                            listadd=False,\n                            editable=False,\n                            deletable=False,\n                           )\n        if r.component and r.component.name == "track_item":\n            # Set the track_item attributes\n            # Can only create or delete track items for a recv record if the status is preparing\n            if r.method == "create" or r.method == "delete":\n                if record.status != SHIP_STATUS_IN_PROCESS:\n                    return False\n            if r.component_id:\n                track_record = tracktable[r.component_id]\n                set_track_attr(track_record.status)\n            else:\n                set_track_attr(TRACK_STATUS_PREPARING)\n                tracktable.status.readable = False\n\n            if r.record and r.record.status == SHIP_STATUS_IN_PROCESS:\n                s3.crud_strings.inv_recv.title_update = \\\n                s3.crud_strings.inv_recv.title_display = T("Process Received Shipment")\n                \n            # Default the Supplier/Donor to the Org sending the shipment\n            tracktable.supply_org_id.default = record.organisation_id\n        else:\n            # Set the recv attributes\n            if r.id:\n                record = recvtable[r.id]\n                set_recv_attr(record.status)\n            else:\n                set_recv_attr(SHIP_STATUS_IN_PROCESS)\n                recvtable.recv_ref.readable = False\n                if r.method and r.method != "read":\n                    # Don\'t want to see in Create forms\n                    recvtable.status.readable = False\n        return True\n    s3.prep = prep\n\n    if len(request.args) > 1 and request.args[1] == "track_item":\n        status = recvtable[request.args[0]].status\n        if status == SHIP_STATUS_SENT:\n            list_fields = ["id",\n                           "status",\n                           "item_id",\n                           "item_pack_id",\n                           "quantity",\n                           "currency",\n                           "pack_value",\n                           "recv_quantity",\n                           "recv_bin",\n                           "owner_org_id",\n                           "supply_org_id",\n                          ]\n            s3db.configure("inv_track_item",\n                            list_fields=list_fields,\n                           )\n        if status:\n            # remove CRUD generated buttons in the tabs\n            s3db.configure("inv_track_item",\n                            create=False,\n                            listadd=False,\n                            editable=False,\n                            deletable=False,\n                           )\n            if recvtable[request.args[0]].status == 2:\n                s3db.configure("inv_track_item",\n                                editable=True,\n                               )\n\n    output = s3_rest_controller(rheader=s3db.inv_recv_rheader)\n    return output\n\n# -----------------------------------------------------------------------------\ndef req_items_for_inv(site_id, quantity_type):\n    """\n        used by recv_process & send_process\n        returns a dict of unique req items (with min  db.req_req.date_required | db.req_req.date)\n        key = item_id\n        @param site_id: The inventory to find the req_items from\n        @param quantity_type: str ("commit", "transit" or "fulfil) The\n                              quantity type which will be used to determine if this item is still outstanding\n    """\n\n    if not settings.has_module("req"):\n        return Storage()\n\n    table = s3db.req_req\n    itable = s3db.req_req_item\n    query = (table.site_id == site_id) & \\\n            (table.id == itable.req_id) & \\\n            (itable.item_pack_id == itable.item_pack_id) & \\\n            (itable["quantity_%s" % quantity_type] < itable.quantity) & \\\n            (table.cancel == False) & \\\n            (table.deleted == False) & \\\n            (itable.deleted == False)\n    req_items = db(query).select(itable.id,\n                                 itable.req_id,\n                                 itable.item_id,\n                                 itable.quantity,\n                                 itable["quantity_%s" % quantity_type],\n                                 itable.item_pack_id,\n                                 orderby = table.date_required | table.date,\n                                 #groupby = itable.item_id\n                                )\n\n    # Because groupby doesn\'t follow the orderby, this will remove any\n    # duplicate req_item, using the first record according to the orderby\n    # req_items = req_items.as_dict( key = "req_req_item.item_id") <- doensn\'t work\n    # @todo: web2py Rows.as_dict function could be extended to enable this functionality instead\n    req_item_ids = []\n    unique_req_items = Storage()\n    for req_item in req_items:\n        if req_item.item_id not in req_item_ids:\n            # This item is not already in the dict\n            unique_req_items[req_item.item_id] = Storage( req_item.as_dict() )\n            req_item_ids.append(req_item.item_id)\n\n    return unique_req_items\n\n# -----------------------------------------------------------------------------\ndef req_item_in_shipment( shipment_item,\n                          shipment_type,\n                          req_items,\n                         ):\n    """\n        Checks if a shipment item is in a request and updates req_item\n        and the shipment.\n    """\n\n    shipment_item_table = "inv_%s_item" % shipment_type\n    try:\n        item_id = shipment_item[shipment_item_table].item_id\n    except:\n        item_id = shipment_item.inv_inv_item.item_id\n\n    # Check for req_items\n    if item_id in req_items:\n        shipment_to_req_type = dict(recv = "fulfil",\n                                    send = "transit")\n        quantity_req_type = "quantity_%s" % shipment_to_req_type[shipment_type]\n\n        # This item has been requested from this inv\n        req_item = req_items[item_id]\n        req_item_id = req_item.id\n\n        # Update the req quantity\n        # convert the shipment items quantity into the req_tem.quantity_fulfil (according to pack)\n        quantity = req_item[quantity_req_type] + \\\n                   (shipment_item[shipment_item_table].pack_quantity / \\\n                    req_item.pack_quantity) * \\\n                    shipment_item[shipment_item_table].quantity\n        quantity = min(quantity, req_item.quantity)  #Cap at req. quantity\n        s3db.req_req_item[req_item_id] = {quantity_req_type: quantity}\n\n        # Link the shipment_item to the req_item\n        s3db[shipment_item_table][shipment_item[shipment_item_table].id] = \\\n            dict(req_item_id = req_item_id)\n\n        # Flag req record to update status_fulfil\n        return req_item.req_id, req_item.id\n    else:\n        return None, None\n\n# -----------------------------------------------------------------------------\ndef recv_process():\n    """ Receive a Shipment """\n\n    try:\n        recv_id = request.args[0]\n    except:\n        redirect(URL(f="recv"))\n\n    atable = s3db.inv_adj\n    rtable = s3db.inv_recv\n    stable = s3db.inv_send\n    tracktable = s3db.inv_track_item\n    siptable = s3db.supply_item_pack\n    rrtable = s3db.req_req\n    ritable = s3db.req_req_item\n\n    if not auth.s3_has_permission("update",\n                                  rtable,\n                                  record_id=recv_id):\n        session.error = T("You do not have permission to receive this shipment.")\n\n    recv_record = rtable[recv_id]\n\n    if recv_record.status == eden.inv.SHIP_STATUS_RECEIVED:\n        session.error = T("This shipment has already been received.")\n\n    if recv_record.status == eden.inv.SHIP_STATUS_CANCEL:\n        session.error = T("This shipment has already been received & subsequently canceled.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "recv",\n                     args = [recv_id]))\n\n    site_id = recv_record.site_id\n    # Update Receive record & lock for editing\n    code = s3db.inv_get_shipping_code(settings.get_inv_recv_shortname(),\n                                      recv_record.site_id,\n                                      s3db.inv_recv.recv_ref)\n    rtable[recv_id] = dict(# date = request.utcnow,\n                           recv_ref = code,\n                           status = eden.inv.inv_ship_status["RECEIVED"],\n                           owned_by_user = None,\n                           owned_by_group = ADMIN)\n    send_row = db(tracktable.recv_id == recv_id).select(tracktable.send_id,\n                                                        limitby=(0, 1)).first()\n    if send_row:\n        send_id = send_row.send_id\n        stable[send_id] = dict(date = request.utcnow,\n                               status = eden.inv.inv_ship_status["RECEIVED"],\n                               owned_by_user = None,\n                               owned_by_group = ADMIN)\n    # Change the status for all track items in this shipment to Unloading\n    # the onaccept will then move the values into the site update any request\n    # record, create any adjustment if needed and change the status to Arrived\n    db(tracktable.recv_id == recv_id).update(status = 3)\n    # Move each item to the site\n    track_rows = db(tracktable.recv_id == recv_id).select()\n    for track_item in track_rows:\n        row=Storage(track_item)\n        s3.inv_track_item_onaccept(Storage(vars=Storage(id=row.id),\n                                           record = row,\n                                           )\n                                  )\n\n    session.confirmation = T("Shipment Items Received")\n    redirect(URL(c = "inv",\n                 f = "recv",\n                 args = [recv_id]))\n\n# -----------------------------------------------------------------------------\ndef recv_cancel():\n    """\n        Cancel a Received Shipment\n\n        @todo what to do if the quantity cancelled doesn\'t exist?\n    """\n\n    try:\n        recv_id = request.args[0]\n    except:\n        redirect(URL(f="recv"))\n\n    rtable = s3db.inv_recv\n    stable = s3db.inv_send\n    tracktable = s3db.inv_track_item\n    inv_item_table = s3db.inv_inv_item\n    ritable = s3db.req_req_item\n    siptable = s3db.supply_item_pack\n    if not auth.s3_has_permission("delete",\n                                  rtable,\n                                  record_id=recv_id):\n        session.error = T("You do not have permission to cancel this received shipment.")\n\n    recv_record = rtable[recv_id]\n\n    if recv_record.status != eden.inv.inv_ship_status["RECEIVED"]:\n        session.error = T("This shipment has not been received - it has NOT been canceled because can still be edited.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "recv",\n                     args = [recv_id]))\n\n    # Go through each item in the shipment remove them from the site store\n    # and put them back in the track item record\n    query = (tracktable.recv_id == recv_id) & \\\n            (tracktable.deleted == False)\n    recv_items = db(query).select()\n    send_id = None\n    for recv_item in recv_items:\n        inv_item_id = recv_item.recv_inv_item_id\n        # This assumes that the inv_item has the quantity\n        quantity = inv_item_table.quantity - recv_item.recv_quantity\n        db(inv_item_table.id == inv_item_id).update(quantity = quantity)\n        db(tracktable.recv_id == recv_id).update(status = 2) # In transit\n        # @todo potential problem in that the send id should be the same for all track items but is not explicitly checked\n        if send_id == None and recv_item.send_id != None:\n            send_id = recv_item.send_id\n    track_rows = db(tracktable.recv_id == recv_id).select()\n    for track_item in track_rows:\n        # if this is linked to a request\n        # then remove these items from the quantity in fulfil\n        if track_item.req_item_id:\n            req_id = track_item.req_item_id\n            req_item = ritable[req_id]\n            req_quantity = req_item.quantity_fulfil\n            req_pack_quantity = siptable[req_item.item_pack_id].quantity\n            track_pack_quantity = siptable[track_item.item_pack_id].quantity\n            quantity_fulfil = s3db.supply_item_add(req_quantity,\n                                                   req_pack_quantity,\n                                                   - track_item.recv_quantity,\n                                                   track_pack_quantity\n                                                  )\n            db(ritable.id == req_id).update(quantity_fulfil = quantity_fulfil)\n            s3db.req_update_status(req_id)\n    # Now set the recv record to cancelled and the send record to sent\n    rtable[recv_id] = dict(date = request.utcnow,\n                           status = eden.inv.inv_ship_status["CANCEL"],\n                           owned_by_user = None,\n                           owned_by_group = ADMIN)\n    if send_id != None:\n        # The sent record is now set back to SENT the warehouse can now cancel\n        # this record to get the stock back into their warehouse.\n        # IMPORTANT reports need to locate this record otherwise it can be\n        # a mechanism to circumvent the auditing of stock\n        stable[send_id] = dict(date = request.utcnow,\n                               status = eden.inv.inv_ship_status["SENT"],\n                               owned_by_user = None,\n                               owned_by_group = ADMIN)\n    redirect(URL(c = "inv",\n                 f = "recv",\n                 args = [recv_id]))\n\n# =============================================================================\ndef track_item():\n    """ RESTful CRUD controller """\n\n    table = s3db.inv_track_item\n\n    s3db.configure("inv_track_item",\n                   create=False,\n                   listadd=False,\n                   insertable=False,\n                   editable=False,\n                   deletable=False,\n                   )\n\n    vars = request.get_vars\n    if "report" in vars:\n        if vars.report == "rel":\n            s3.crud_strings["inv_track_item"] = Storage(\n                                                        title_list = T("Summary of Releases"),\n                                                        subtitle_list = T("Summary Details"),\n                                                        title_search = T("Summary of Releases"),\n                                                        )\n            s3db.configure("inv_track_item",\n                            list_fields = ["id",\n                                           #"send_id",\n                                           #"req_item_id",\n                                           (T("Date Released"), "send_id$date"),\n                                           (T("Beneficiary"), "send_id$site_id"),\n                                           (settings.get_inv_send_shortname(), "send_id$send_ref"),\n                                           (settings.get_req_shortname(), "send_id$req_ref"),\n                                           (T("Items/Description"), "item_id"),\n                                           (T("Source"), "supply_org_id"),\n                                           (T("Unit"), "item_pack_id"),\n                                           (T("Quantity"), "quantity"),\n                                           (T("Unit Cost"), "pack_value"),\n                                           (T("Total Cost"), "total_value"),\n                                           ],\n                            orderby = "site_id",\n                            sort = True\n                            )\n            s3.filter = (table.send_id != None)\n\n        elif vars.report == "inc":\n            s3.crud_strings["inv_track_item"] = Storage(\n                                                        title_list = T("Summary of Incoming Supplies"),\n                                                        subtitle_list = T("Summary Details"),\n                                                        title_search = T("Summary of Incoming Supplies"),\n                                                        )\n\n            s3db.configure("inv_track_item",\n                            list_fields = ["id",\n                                           (T("Date Received"), "recv_id$date"),\n                                           (T("Received By"), "recv_id$recipient_id"),\n                                           (settings.get_inv_send_shortname(), "recv_id$send_ref"),\n                                           (settings.get_inv_recv_shortname(), "recv_id$recv_ref"),\n                                           (settings.get_proc_shortname(), "recv_id$purchase_ref"),\n                                           (T("Item/Description"), "item_id"),\n                                           (T("Unit"), "item_pack_id"),\n                                           (T("Quantity"), "quantity"),\n                                           (T("Unit Cost"), "pack_value"),\n                                           (T("Total Cost"), "total_value"),\n                                           (T("Source"), "supply_org_id"),\n                                           (T("Remarks"), "comments"),\n                                           ],\n                            orderby = "recipient_id",\n                            )\n            s3.filter = (table.recv_id != None)\n\n        elif vars.report == "util":\n            s3.crud_strings["inv_track_item"] = Storage(\n                                                        title_list = T("Utilization Report"),\n                                                        subtitle_list = T("Utilization Details"),\n                                                        title_search = T("Utilization Report"),\n                                                        )\n\n            s3db.configure("inv_track_item",\n                            list_fields = ["id",\n                                           (T("Item/Description"), "item_id$name"),\n                                           (T("Beneficiary"), "send_id$site_id"),\n                                           (settings.get_inv_send_shortname(), "send_id$send_ref"),\n                                           (settings.get_req_shortname(), "send_id$req_ref"),\n                                           (T("Items/Description"), "item_id"),\n                                           (T("Source"), "supply_org_id"),\n                                           (T("Unit"), "item_pack_id"),\n                                           (T("Quantity"), "quantity"),\n                                           (T("Unit Cost"), "pack_value"),\n                                           (T("Total Cost"), "total_value"),\n                                           ]\n                            )\n\n            s3.filter = (table.item_id != None)\n\n        elif vars.report == "exp":\n            s3.crud_strings["inv_track_item"] = Storage(\n                                                        title_list = T("Expiration Report"),\n                                                        subtitle_list = T("Expiration Details"),\n                                                        title_search = T("Expiration Report"),\n                                                        )\n\n            s3db.configure("inv_track_item",\n                            list_fields = ["id",\n                                           (T("Item/Description"), "item_id"),\n                                           (T("Expiration Date"), "expiry_date"),\n                                           (T("Source"), "supply_org_id"),\n                                           (T("Unit"), "item_pack_id"),\n                                           (T("Quantity"), "quantity"),\n                                           (T("Unit Cost"), "pack_value"),\n                                           (T("Total Cost"), "total_value"),\n                                           ]\n                            )\n            s3.filter = (table.expiry_date != None)\n\n    output = s3_rest_controller(rheader=s3db.inv_warehouse_rheader)\n    return output\n\n# =============================================================================\ndef adj():\n    """ RESTful CRUD controller """\n\n    table = s3db.inv_adj\n\n    # Limit site_id to sites the user has permissions for\n    error_msg = T("You do not have permission to adjust the stock level in this warehouse.")\n    auth.permitted_facilities(table=table, error_msg=error_msg)\n\n    def prep(r):\n        if r.interactive:\n            if r.component:\n                if r.component_id:\n                    aitable = s3db.inv_adj_item\n                    if r.record.status == 0:\n                        aitable.reason.writable = True\n                    record = aitable[r.component_id]\n                    if record.inv_item_id:\n                        aitable.item_id.writable = False\n                        aitable.item_id.comment = None\n                        aitable.item_pack_id.writable = False\n            else:\n                # if an adjustment has been selected and it has been completed\n                # then make the fields read only\n                if r.record and r.record.status:\n                    table.adjuster_id.writable = False\n                    table.site_id.writable = False\n                    table.comments.writable = False\n                else:\n                    if "item" in request.vars and "site" in request.vars:\n                        # create a adj record with a single adj_item record\n                        adj_id = table.insert(adjuster_id = auth.s3_logged_in_person(),\n                                              site_id = request.vars.site,\n                                              adjustment_date = request.utcnow,\n                                              status = 0,\n                                              category = 1,\n                                              comments = "Single item adjustment"\n                                              )\n                        inv_item_table = s3db.inv_inv_item\n                        inv_item = inv_item_table[request.vars.item]\n                        adjitemtable = s3db.inv_adj_item\n                        adj_item_id = adjitemtable.insert(reason = 0,\n                                    adj_id = adj_id,\n                                    inv_item_id = inv_item.id, # original source inv_item\n                                    item_id = inv_item.item_id, # the supply item\n                                    item_pack_id = inv_item.item_pack_id,\n                                    old_quantity = inv_item.quantity,\n                                    currency = inv_item.currency,\n                                    old_status = inv_item.status,\n                                    new_status = inv_item.status,\n                                    old_pack_value = inv_item.pack_value,\n                                    new_pack_value = inv_item.pack_value,\n                                    expiry_date = inv_item.expiry_date,\n                                    bin = inv_item.bin,\n                                    old_owner_org_id = inv_item.owner_org_id,\n                                    new_owner_org_id = inv_item.owner_org_id,\n                                   )\n                        redirect(URL(c = "inv",\n                                     f = "adj",\n                                     args = [adj_id,\n                                             "adj_item",\n                                             adj_item_id,\n                                             "update"]))\n                    else:\n                        table.comments.default = "Complete Stock Adjustment"\n                        if "site" in request.vars:\n                            table.site_id.writable = True\n                            table.site_id.default = request.vars.site\n        return True\n    s3.prep = prep\n\n    def postp(r, output):\n        if r.interactive:\n            s3_action_buttons(r, deletable=False)\n        return output\n    s3.postp = postp\n\n    if len(request.args) > 1 and request.args[1] == "adj_item" and table[request.args[0]].status:\n        # remove CRUD generated buttons in the tabs\n        s3db.configure("inv_adj_item",\n                        create=False,\n                        listadd=False,\n                        editable=False,\n                        deletable=False,\n                       )\n\n    output = s3_rest_controller(rheader=s3db.inv_adj_rheader)\n    return output\n\n# -----------------------------------------------------------------------------\ndef adj_close():\n    """ RESTful CRUD controller """\n\n    try:\n        adj_id = request.args[0]\n    except:\n        redirect(URL(f="adj"))\n\n    atable = s3db.inv_adj\n    aitable = s3db.inv_adj_item\n    inv_item_table = s3db.inv_inv_item\n\n    # Limit site_id to sites the user has permissions for\n    error_msg = T("You do not have permission to adjust the stock level in this warehouse.")\n    auth.permitted_facilities(table=atable, error_msg=error_msg)\n\n    adj_rec = atable[adj_id]\n    if adj_rec.status != 0:\n        session.error = T("This adjustment has already been closed.")\n\n    if session.error:\n        redirect(URL(c = "inv",\n                     f = "adj",\n                     args = [adj_id]))\n\n    # Go through all the adj_items\n    query = (aitable.adj_id == adj_id) & \\\n            (aitable.deleted == False)\n    adj_items = db(query).select()\n    for adj_item in adj_items:\n        if adj_item.inv_item_id == None:\n            # Create a new stock item\n            inv_item_id = inv_item_table.insert(site_id = adj_rec.site_id,\n                                                item_id = adj_item.item_id,\n                                                item_pack_id = adj_item.item_pack_id,\n                                                currency = adj_item.currency,\n                                                bin = adj_item.bin,\n                                                pack_value = adj_item.old_pack_value,\n                                                expiry_date = adj_item.expiry_date,\n                                                quantity = adj_item.new_quantity,\n                                                owner_org_id = adj_item.old_owner_org_id,\n                                               )\n            # Add the inventory item id to the adjustment record\n            db(aitable.id == adj_item.id).update(inv_item_id = inv_item_id)\n        elif adj_item.new_quantity is not None:\n            # Update the existing stock item\n            db(inv_item_table.id == adj_item.inv_item_id).update(item_pack_id = adj_item.item_pack_id,\n                                                                 bin = adj_item.bin,\n                                                                 pack_value = adj_item.old_pack_value,\n                                                                 expiry_date = adj_item.expiry_date,\n                                                                 quantity = adj_item.new_quantity,\n                                                                 owner_org_id = adj_item.new_owner_org_id,\n                                                                 status = adj_item.new_status,\n                                                                )\n    # Change the status of the adj record to Complete\n    db(atable.id == adj_id).update(status=1)\n    # Go to the Inventory of the Site which has adjusted these items\n    (prefix, resourcename, id) = s3db.get_instance(s3db.org_site,\n                                                   adj_rec.site_id)\n    url = URL(c = prefix,\n              f = resourcename,\n              args = [id, "inv_item"])\n\n    redirect(url)\n\n# =============================================================================\ndef recv_item_json():\n    """\n    """\n\n    stable = s3db.org_site\n    rtable = s3db.inv_recv\n    ittable = s3db.inv_track_item\n\n    rtable.date.represent = lambda dt: dt[:10]\n\n    query = (ittable.req_item_id == request.args[0]) & \\\n            (rtable.id == ittable.recv_id) & \\\n            (rtable.site_id == stable.id) & \\\n            (rtable.status == eden.inv.inv_ship_status["RECEIVED"]) & \\\n            (ittable.deleted == False )\n    records = db(query).select(rtable.id,\n                               rtable.date,\n                               stable.name,\n                               ittable.quantity)\n\n    json_str = "[%s,%s" % ( json.dumps(dict(id = str(T("Received")),\n                                            quantity = "#"\n                                            )) ,\n                            records.json()[1:])\n\n    response.headers["Content-Type"] = "application/json"\n    return json_str\n\n# -----------------------------------------------------------------------------\ndef send_item_json():\n    """\n    """\n\n    stable = s3db.org_site\n    istable = s3db.inv_send\n    ittable = s3db.inv_track_item\n\n    istable.date.represent = lambda dt: dt[:10]\n\n    query = (ittable.req_item_id == request.args[0]) & \\\n            (istable.id == ittable.send_id) & \\\n            (istable.site_id == stable.id) & \\\n            ((istable.status == eden.inv.inv_ship_status["SENT"]) | \\\n             (istable.status == eden.inv.inv_ship_status["RECEIVED"])) & \\\n            (ittable.deleted == False)\n    records = db(query).select(istable.id,\n                               istable.date,\n                               stable.name,\n                               ittable.quantity)\n\n    json_str = "[%s,%s" % ( json.dumps(dict(id = str(T("Sent")),\n                                            quantity = "#"\n                                            )) ,\n                            records.json()[1:])\n\n    response.headers["Content-Type"] = "application/json"\n    return json_str\n\n# -----------------------------------------------------------------------------\ndef kit():\n    return s3_rest_controller()\n\n#==============================================================================\ndef kit_item():\n    return s3_rest_controller()\n\n# -----------------------------------------------------------------------------\ndef facility():\n    return s3_rest_controller("org", rheader = s3db.org_facility_rheader)\n\n# -----------------------------------------------------------------------------\ndef incoming():\n    """ Incoming Shipments """\n\n    # Defined in the Model for use from Multiple Controllers for unified menus\n    return inv_incoming()\n\n# -----------------------------------------------------------------------------\ndef req_match():\n    """ Match Requests """\n\n    return s3db.req_match()\n\n# END =========================================================================\n\nresponse._vars=response._caller(send)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/web2py/gluon/restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "/home/web2py/applications/eden/controllers/inv.py", line 1884, in <module>\n  File "/home/web2py/gluon/globals.py", line 186, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/web2py/applications/eden/controllers/inv.py", line 554, in send\n    sendtable = s3db.inv_send\n  File "applications/eden/modules/s3/s3model.py", line 159, in __getattr__\n    AttributeError("undefined table: %s" % name))\n  File "applications/eden/modules/s3/s3model.py", line 213, in table\n    model(prefix)\n  File "applications/eden/modules/s3/s3model.py", line 92, in __init__\n    env = self.model()\n  File "applications/eden/modules/eden/inv.py", line 903, in model\n    req_item_id = self.req_item_id\n  File "applications/eden/modules/s3/s3model.py", line 159, in __getattr__\n    AttributeError("undefined table: %s" % name))\n  File "applications/eden/modules/s3/s3model.py", line 213, in table\n    model(prefix)\n  File "applications/eden/modules/s3/s3model.py", line 92, in __init__\n    env = self.model()\n  File "applications/eden/modules/eden/req.py", line 870, in model\n    self.req_req_id(),\n  File "applications/eden/modules/s3/s3model.py", line 159, in __getattr__\n    AttributeError("undefined table: %s" % name))\n  File "applications/eden/modules/s3/s3model.py", line 213, in table\n    model(prefix)\n  File "applications/eden/modules/s3/s3model.py", line 92, in __init__\n    env = self.model()\n  File "applications/eden/modules/eden/req.py", line 180, in model\n    widget="date",\n  File "applications/eden/modules/s3/s3fields.py", line 1030, in s3_datetime\n    month=future_month)\nValueError: month must be in 1..12\n'
p11
s.