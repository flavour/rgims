(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1146, "Table \'sahana.auth_group\' doesn\'t exist")'
p3
sS'layer'
p4
S'C:\\Eden\\web2py\\applications\\eden\\models\\00_settings.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n"""\n    Global settings:\n\n    Those which are typically edited during a deployment are in\n    000_config.py & their results parsed into here. Deployers\n    shouldn\'t typically need to edit any settings here.\n"""\n\n# Keep all our configuration options off the main global variables\n\n# Use response.s3 for one-off variables which are visible in views without explicit passing\ns3.formats = Storage()\n\n# Workaround for this Bug in Selenium with FF4:\n#    http://code.google.com/p/selenium/issues/detail?id=1604\ns3.interactive = settings.get_ui_confirm()\n\ns3.base_url = "%s/%s" % (settings.get_base_public_url(),\n                         appname)\ns3.download_url = "%s/default/download" % s3.base_url\n\n###############\n# Client tests\n###############\n\n# Check whether browser is Mobile & store result in session\n# - commented-out until we make use of it\n#if session.s3.mobile is None:\n#    session.s3.mobile = s3base.s3_is_mobile_client(request)\n#if session.s3.browser is None:\n#    session.s3.browser = s3base.s3_populate_browser_compatibility(request)\n\n##################\n# Global variables\n##################\n\n# Strings to i18n\nmessages["UNAUTHORISED"] = "Not authorised!"\nmessages["BADFORMAT"] = "Unsupported data format!"\nmessages["BADMETHOD"] = "Unsupported method!"\nmessages["BADRECORD"] = "Record not found!"\nmessages["INVALIDREQUEST"] = "Invalid request!"\nmessages["XLWT_ERROR"] = "xlwt module not available within the running Python - this needs installing for XLS output!"\nmessages["REPORTLAB_ERROR"] = "ReportLab module not available within the running Python - this needs installing for PDF output!"\n# Common Labels\n#messages["BREADCRUMB"] = ">> "\nmessages["UNKNOWN_OPT"] = "Unknown"\nmessages["NONE"] = "-"\nmessages["READ"] = settings.get_ui_read_label()\nmessages["UPDATE"] = settings.get_ui_update_label()\nmessages["DELETE"] = "Delete"\nmessages["COPY"] = "Copy"\nmessages["NOT_APPLICABLE"] = "N/A"\nmessages["ADD_PERSON"] = "Add Person"\nmessages["ADD_LOCATION"] = "Add Location"\nmessages["SELECT_LOCATION"] = "Select a location"\nmessages["COUNTRY"] = "Country"\nmessages["ORGANISATION"] = "Organization"\n\nfor u in messages:\n    if isinstance(messages[u], str):\n        globals()[u] = T(messages[u])\n\n# Pass to CRUD\ns3mgr.LABEL["READ"] = READ\ns3mgr.LABEL["UPDATE"] = UPDATE\ns3mgr.LABEL["DELETE"] = DELETE\ns3mgr.LABEL["COPY"] = COPY\n\n# To get included in <HEAD>\ns3.stylesheets = []\ns3.external_stylesheets = []\n# To get included at the end of <BODY>\ns3.scripts = []\ns3.js_global = []\ns3.jquery_ready = []\n\n###########\n# Languages\n###########\n\ns3.l10n_languages = settings.get_L10n_languages()\n\n# Default strings are in US English\nT.current_languages = ["en", "en-us"]\n# Check if user has selected a specific language\nif request.vars._language:\n    language = request.vars._language\n    session.s3.language = language\nelif session.s3.language:\n    # Use the last-selected language\n    language = session.s3.language\nelif auth.is_logged_in():\n    # Use user preference\n    language = auth.user.language\nelse:\n    # Use system default\n    language = settings.get_L10n_default_language()\n#else:\n#    # Use what browser requests (default web2py behaviour)\n#    T.force(T.http_accept_language)\n\n# IE doesn\'t set request.env.http_accept_language\n#if language != "en":\nT.force(language)\n\n# Store for views (e.g. Ext)\nif language.find("-") == -1:\n    # Ext peculiarities\n    if language == "vi":\n        s3.language = "vn"\n    elif language == "el":\n        s3.language = "el_GR"\n    else:\n        s3.language = language\nelse:\n    lang_parts = language.split("-")\n    s3.language = "%s_%s" % (lang_parts[0], lang_parts[1].upper())\n\n# List of Languages which use a Right-to-Left script (Arabic, Hebrew, Farsi, Urdu)\ns3_rtl_languages = ["ur", "ar"]\n\nif T.accepted_language in s3_rtl_languages:\n    s3.rtl = True\nelse:\n    s3.rtl = False\n\n######\n# Auth\n######\n_settings = auth.settings\n_settings.lock_keys = False\n\n_settings.password_min_length = 4\n_settings.expiration = 28800  # seconds\n\n_settings.facebook = settings.get_auth_facebook()\n_settings.google = settings.get_auth_google()\n\nif settings.get_auth_openid():\n    # Requires http://pypi.python.org/pypi/python-openid/\n    try:\n        from gluon.contrib.login_methods.openid_auth import OpenIDAuth\n        openid_login_form = OpenIDAuth(auth)\n        from gluon.contrib.login_methods.extended_login_form import ExtendedLoginForm\n        extended_login_form = ExtendedLoginForm(auth, openid_login_form,\n                                                signals=["oid", "janrain_nonce"])\n        auth.settings.login_form = extended_login_form\n    except ImportError:\n        session.warning = T("Library support not available for OpenID")\n\n# Allow use of LDAP accounts for login\n# NB Currently this means that change password should be disabled:\n#_settings.actions_disabled.append("change_password")\n# (NB These are not automatically added to PR or to Authenticated role since they enter via the login() method not register())\n#from gluon.contrib.login_methods.ldap_auth import ldap_auth\n# Require even alternate login methods to register users 1st\n#_settings.alternate_requires_registration = True\n# Active Directory\n#_settings.login_methods.append(ldap_auth(mode="ad", server="dc.domain.org", base_dn="ou=Users,dc=domain,dc=org"))\n# or if not wanting local users at all (no passwords saved within DB):\n#_settings.login_methods = [ldap_auth(mode="ad", server="dc.domain.org", base_dn="ou=Users,dc=domain,dc=org")]\n# Domino\n#_settings.login_methods.append(ldap_auth(mode="domino", server="domino.domain.org"))\n# OpenLDAP\n#_settings.login_methods.append(ldap_auth(server="directory.sahanafoundation.org", base_dn="ou=users,dc=sahanafoundation,dc=org"))\n# Allow use of Email accounts for login\n#_settings.login_methods.append(email_auth("smtp.gmail.com:587", "@gmail.com"))\n\n# Require captcha verification for registration\n#auth.settings.captcha = RECAPTCHA(request, public_key="PUBLIC_KEY", private_key="PRIVATE_KEY")\n# Require Email Verification\n_settings.registration_requires_verification = settings.get_auth_registration_requires_verification()\n_settings.on_failed_authorization = URL(c="default", f="user",\n                                        args="not_authorized")\n_settings.reset_password_requires_verification = True\n_settings.verify_email_next = URL(c="default", f="index")\n\n# Auth Messages\n_messages = auth.messages\n\n_messages.verify_email = "Click on the link %(url)s%(key)s to verify your email" % \\\n    dict(url="%s/default/user/verify_email/" % s3.base_url,\n         key="%(key)s")\n_messages.verify_email_subject = "%(system_name)s - Verify Email" % \\\n    {"system_name" : settings.get_system_name()}\n_messages.reset_password = "%s %s/default/user/reset_password/%s %s" % \\\n    (T("Click on the link"),\n     s3.base_url,\n     "%(key)s",\n     T("to reset your password"))\n_messages.help_mobile_phone = T("Entering a phone number is optional, but doing so allows you to subscribe to receive SMS messages.")\n# Require Admin approval for self-registered users\n_settings.registration_requires_approval = settings.get_auth_registration_requires_approval()\n_messages.registration_pending = settings.get_auth_registration_pending()\n\n_messages["approve_user"] = \\\n"""Your action is required to approve a New User for %(system_name)s:\n%(name_format)s\nPlease go to %(base_url)s/admin/user to approve this user.""" \\\n% dict(system_name = settings.get_system_name(),\n       name_format = \\\n"""%(first_name)s %(last_name)s\n%(email)s""",\n       base_url = s3.base_url)\n\n_messages["new_user"] = \\\n"""A New User has registered for %(system_name)s:\n%(name_format)s\nNo action is required.""" \\\n% dict(system_name = settings.get_system_name(),\n       name_format = \\\n"""%(first_name)s %(last_name)s\n%(email)s""")\n\n_messages["confirmation_email_subject"] = "%s %s" % (settings.get_system_name(),\n                                                     T("access granted"))\n_messages["confirmation_email"] = "%s %s %s %s. %s." % (T("Welcome to the"),\n                                                        settings.get_system_name(),\n                                                        T("Portal at"),\n                                                        s3.base_url,\n                                                        T("Thanks for your assistance"))\n\n# We don\'t wish to clutter the groups list with 1 per user.\n_settings.create_user_groups = False\n# We need to allow basic logins for Webservices\n_settings.allow_basic_login = True\n\n_settings.logout_onlogout = s3_auth_on_logout\n_settings.login_onaccept = s3_auth_on_login\n_settings.login_next = settings.get_auth_login_next()\nif settings.has_module("vol") and \\\n   settings.get_auth_registration_volunteer():\n    _settings.register_next = URL(c="vol", f="person")\n\n# Languages available in User Profiles\nif len(s3.l10n_languages) > 1:\n    _settings.table_user.language.requires = IS_IN_SET(s3.l10n_languages,\n                                                       zero=None)\nelse:\n    field = _settings.table_user.language\n    field.default = s3.l10n_languages.keys()[0]\n    field.readable = False\n    field.writable = False\n\n_settings.lock_keys = True\n\n######\n# Mail\n######\n\n# These settings could be made configurable as part of the Messaging Module\n# - however also need to be used by Auth (order issues), DB calls are overheads\n# - as easy for admin to edit source here as to edit DB (although an admin panel can be nice)\nmail.settings.server = settings.get_mail_server()\nmail.settings.tls = settings.get_mail_server_tls()\nmail_server_login = settings.get_mail_server_login()\nif mail_server_login:\n    mail.settings.login = mail_server_login\nmail.settings.sender = settings.get_mail_sender()\n# Email settings for registration verification\n_settings.mailer = mail\n\n#########\n# Session\n#########\n\n# Custom Notifications\nresponse.error = session.error\nresponse.confirmation = session.confirmation\nresponse.information = session.information\nresponse.warning = session.warning\nsession.error = []\nsession.confirmation = []\nsession.information = []\nsession.warning = []\n\n# Shortcuts for system role IDs, see modules/s3aaa.py/AuthS3\nsystem_roles = auth.get_system_roles()\nADMIN = system_roles.ADMIN\nAUTHENTICATED = system_roles.AUTHENTICATED\nANONYMOUS = system_roles.ANONYMOUS\nEDITOR = system_roles.EDITOR\nMAP_ADMIN = system_roles.MAP_ADMIN\nORG_ADMIN = system_roles.ORG_ADMIN\n\nif s3.debug:\n    # Add the developer toolbar from modules/s3/s3utils.py\n    s3.toolbar = s3base.s3_dev_toolbar\n\n######\n# CRUD\n######\n\ndef s3_formstyle(id, label, widget, comment, hidden=False):\n    """\n        Provide the Sahana Eden Form Style\n\n        Label above the Inputs:\n        http://uxmovement.com/design-articles/faster-with-top-aligned-labels\n    """\n\n    row = []\n\n    if hidden:\n        _class = "hide"\n    else:\n        _class = ""\n\n    # Label on the 1st row\n    row.append(TR(TD(label, _class="w2p_fl"), TD(""), _id=id + "1", _class=_class))\n    # Widget & Comment on the 2nd Row\n    row.append(TR(widget, TD(comment, _class="w2p_fc"), _id=id, _class=_class))\n\n    return tuple(row)\n\ns3_formstyle_mobile = s3_formstyle\n\n_crud = s3.crud\n_crud.formstyle = s3_formstyle\n_crud.submit_button = T("Save")\n# Optional class for Submit buttons\n#_crud.submit_style = "submit-button"\n_crud.confirm_delete = T("Do you really want to delete these records?")\n\n_crud.archive_not_delete = settings.get_security_archive_not_delete()\n_crud.navigate_away_confirm = settings.get_ui_navigate_away_confirm()\n\n# Web2py Crud\n\n# Breaks refresh of List after Create: http://groups.google.com/group/web2py/browse_thread/thread/d5083ed08c685e34\n#crud.settings.keepvalues = True\ncrud.messages.submit_button = s3.crud.submit_button\ncrud.settings.formstyle = s3.crud.formstyle\n\n##################\n# XML/JSON Formats\n##################\n\ns3mgr.crud = s3base.S3CRUD\ns3mgr.search = s3base.S3Search\n\n# Content Type Headers, default is application/xml for XML formats\n# and text/x-json for JSON formats, other content types must be\n# specified here:\ns3mgr.content_type = Storage(\n    tc = "application/atom+xml", # TableCast feeds\n    rss = "application/rss+xml", # RSS\n    georss = "application/rss+xml", # GeoRSS\n    kml = "application/vnd.google-earth.kml+xml", # KML\n)\n\n# JSON Formats\ns3mgr.json_formats = ["geojson", "s3json"]\n\n# CSV Formats\ns3mgr.csv_formats = ["hrf", "s3csv"]\n\ns3mgr.ROWSPERPAGE = 20\n\n# Valid Extensions for Image Upload fields\ns3.IMAGE_EXTENSIONS = ["png", "PNG", "jpg", "JPG", "jpeg", "JPEG", "gif", "GIF", "tif", "TIF", "tiff", "TIFF", "bmp", "BMP", "raw", "RAW"]\n\n# Default CRUD strings\nADD_RECORD = T("Add Record")\ns3.crud_strings = Storage(\n    title_create = ADD_RECORD,\n    title_display = T("Record Details"),\n    title_list = T("Records"),\n    title_update = T("Edit Record"),\n    title_search = T("Search Records"),\n    title_map = T("Map"),\n    subtitle_create = T("Add New Record"),\n    label_list_button = T("List Records"),\n    label_create_button = ADD_RECORD,\n    label_delete_button = T("Delete Record"),\n    msg_record_created = T("Record added"),\n    msg_record_modified = T("Record updated"),\n    msg_record_deleted = T("Record deleted"),\n    msg_list_empty = T("No Records currently available"),\n    msg_match = T("Matching Records"),\n    msg_no_match = T("No Matching Records"),\n    name_nice = T("Record"),\n    name_nice_plural = T("Records"))\n\n# END =========================================================================\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Eden\\web2py\\gluon\\restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "C:\\Eden\\web2py\\applications\\eden\\models\\00_settings.py", line 281, in <module>\n    system_roles = auth.get_system_roles()\n  File "applications\\eden\\modules\\s3\\s3aaa.py", line 2152, in get_system_roles\n    rows = current.db(query).select(gtable.id, gtable.uuid)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 8802, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1599, in select\n    return self._select_aux(sql,fields,attributes)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1564, in _select_aux\n    self.execute(sql)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1676, in execute\n    return self.log_execute(*a, **b)\n  File "C:\\Eden\\web2py\\gluon\\dal.py", line 1670, in log_execute\n    ret = self.cursor.execute(*a, **b)\n  File "C:\\Python27\\lib\\site-packages\\MySQLdb\\cursors.py", line 181, in execute\n    self.errorhandler(self, exc, value)\n  File "C:\\Python27\\lib\\site-packages\\MySQLdb\\connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, "Table \'sahana.auth_group\' doesn\'t exist")\n'
p11
s.